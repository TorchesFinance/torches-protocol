{
  "address": "0x95e9C3C11146FF50e5827  \"address\": \"0x95e9C3C11146FF50e58277eDDa00B848643B5B00\",\n7eDDa00B848643B5B00",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "CompSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isComped",
          "type": "bool"
        }
      ],
      "name": "MarketComped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowFactor",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowFactor",
          "type": "uint256"
        }
      ],
      "name": "_setBorrowFactor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_allMarkets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_compSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setCompSpeeds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract TorchesConfig",
          "name": "_torchesConfig",
          "type": "address"
        }
      ],
      "name": "_setTorchesConfig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seizeTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSeizeTokenAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidatorAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyVaultAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "compClaimThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "compInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "compRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanAmount",
          "type": "uint256"
        }
      ],
      "name": "flashLoanAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCompAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getFlashLoanCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isComped",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "borrowFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "safetyGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "torchesConfig",
      "outputs": [
        {
          "internalType": "contract TorchesConfig",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x59c661b8360d3117b186fb1f4d026a4c84d7d96b4544e37f2b50ec20b062ea22",
  "receipt": {
    "to": null,
    "from": "0x8a7799E2F01A707684F5e422C1632e297a7E7DB9",
    "contractAddress": "0x95e9C3C11146FF50e58277eDDa00B848643B5B00",
    "transactionIndex": 0,
    "gasUsed": "5151411",
    "logsBloom": "0x
    "blockHash": "0x1901d7cc4374ba3ecf11af43bc45419ab84db10f516f93ea27d02b5496a50c30",
    "transactionHash": "0x59c661b8360d3117b186fb1f4d026a4c84d7d96b4544e37f2b50ec20b062ea22",
    "logs": [],
    "blockNumber": 19749073,
    "cumulativeGasUsed": "5151411",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4611695ea7dda092c6ff3fb3d147bd7b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"name\":\"MarketComped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowFactor\",\"type\":\"uint256\"}],\"name\":\"NewBorrowFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowFactor\",\"type\":\"uint256\"}],\"name\":\"_setBorrowFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allMarkets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_compSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setCompSpeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TorchesConfig\",\"name\":\"_torchesConfig\",\"type\":\"address\"}],\"name\":\"_setTorchesConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seizeTokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSeizeTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyVaultAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compClaimThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanAmount\",\"type\":\"uint256\"}],\"name\":\"flashLoanAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getFlashLoanCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safetyGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"torchesConfig\",\"outputs\":[{\"internalType\":\"contract TorchesConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"_setBorrowFactor(address,uint256)\":{\"details\":\"Admin function to set the borrow factors.\",\"params\":{\"cToken\":\"The addresses of the markets (tokens) to change the borrow factors for\",\"newBorrowFactor\":\"The new borrow factor values in underlying to be set. Must be between (0, 1]\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setCompSpeeds(address[],uint256[])\":{\"details\":\"Admin function to set new token distribution speed\"},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"return\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"return\":\"True if the account is in the asset, otherwise false.\"},\"claimComp(address)\":{\"params\":{\"holder\":\"The address to claim COMP for\"}},\"claimComp(address,address[])\":{\"params\":{\"cTokens\":\"The list of markets to claim COMP in\",\"holder\":\"The address to claim COMP for\"}},\"claimComp(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim COMP earned by borrowing\",\"cTokens\":\"The list of markets to claim COMP in\",\"holders\":\"The addresses to claim COMP for\",\"suppliers\":\"Whether or not to claim COMP earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"return\":\"Success indicator for whether each corresponding market was entered\"},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"return\":\"Whether or not the account successfully exited the market\"},\"getAccountLiquidity(address)\":{\"return\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)\"},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"return\":\"The list of market addresses\"},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"return\":\"A dynamic list with the assets the account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"return\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"return\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"return\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"return\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"return\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"return\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}}},\"userdoc\":{\"methods\":{\"_setBorrowFactor(address,uint256)\":{\"notice\":\"Set the given borrow factors for the given cToken markets.\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setCompSpeeds(address[],uint256[])\":{\"notice\":\"Sets new governance token distribution speed\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimComp(address)\":{\"notice\":\"Claim all the comp accrued by holder in all markets\"},\"claimComp(address,address[])\":{\"notice\":\"Claim all the comp accrued by holder in the specified markets\"},\"claimComp(address[],address[],bool,bool)\":{\"notice\":\"Claim all comp accrued by the holders\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Torchestroller.sol\":\"Torchestroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ILiquidityGauge.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ninterface ILiquidityGauge {\\n    function notifySavingsChange(address addr) external;\\n}\\n\",\"keccak256\":\"0xed84bf982d5d038257bb0cb66510684997903dc9bb22b137867adc3d8046ef7d\"},\"contracts/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract Ownable {\\n    address public _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xa9a8fac085ea67f25333b2b32b4b1aa9693a251e17e724ba0c00b50d6ddb81b6\"},\"contracts/TorchesConfig.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ILiquidityGauge.sol\\\";\\nimport \\\"./compound/Exponential.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract TorchesConfig is Ownable, Exponential {\\n    address public compToken;\\n    uint public safetyVaultRatio = 0.01e18;\\n    address public safetyVault;\\n    address payable public safetyGuardian;\\n    address payable public pendingSafetyGuardian;\\n\\n    struct MarketCap {\\n        /**\\n       *  The borrow capacity of the asset, will be checked in borrowAllowed()\\n       *  0 means there is no limit on the capacity\\n       */\\n        uint borrowCap;\\n\\n        /**\\n         *  The supply capacity of the asset, will be checked in mintAllowed()\\n         *  0 means there is no limit on the capacity\\n         */\\n        uint supplyCap;\\n\\n        /**\\n         *  The flash loan capacity of the asset, will be checked in flashLoanAllowed()\\n         *  0 means there is no limit on the capacity\\n         */\\n        uint flashLoanCap;\\n    }\\n\\n    uint public compRatio = 0.5e18;\\n    mapping(address => bool) public whitelist;\\n    mapping(address => bool) public blacklist;\\n    mapping(address => MarketCap) marketsCap;\\n    // creditLimits allowed specific protocols to borrow and repay without collateral\\n    mapping(address => uint) public creditLimits;\\n    uint public flashLoanFeeRatio = 0.0001e18;\\n\\n    ILiquidityGauge public liquidityGauge;\\n\\n    event NewCompToken(address oldCompToken, address newCompToken);\\n    event NewSafetyVault(address oldSafetyVault, address newSafetyVault);\\n    event NewSafetyVaultRatio(uint oldSafetyVaultRatio, uint newSafetyVault);\\n\\n    event NewCompRatio(uint oldCompRatio, uint newCompRatio);\\n    event WhitelistChange(address user, bool enabled);\\n    event BlacklistChange(address user, bool enabled);\\n    /// @notice Emitted when protocol's credit limit has changed\\n    event CreditLimitChanged(address protocol, uint creditLimit);\\n    event FlashLoanFeeRatioChanged(uint oldFeeRatio, uint newFeeRatio);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(address indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when supply cap for a cToken is changed\\n    event NewSupplyCap(address indexed cToken, uint newSupplyCap);\\n\\n    /// @notice Emitted when flash loan for a cToken is changed\\n    event NewFlashLoanCap(address indexed cToken, uint newFlashLoanCap);\\n\\n    event NewPendingSafetyGuardian(address oldPendingSafetyGuardian, address newPendingSafetyGuardian);\\n\\n    event NewSafetyGuardian(address oldSafetyGuardian, address newSafetyGuardian);\\n\\n    event NewLiquidityGauge(address oldLiquidityGauge, address newLiquidityGauage);\\n\\n    modifier onlySafetyGuardian {\\n        require(msg.sender == safetyGuardian, \\\"Safety guardian required.\\\");\\n        _;\\n    }\\n\\n    constructor(TorchesConfig previousQsConfig) public {\\n        safetyGuardian = msg.sender;\\n        if (address(previousQsConfig) == address(0x0)) return;\\n       \\n        safetyGuardian = previousQsConfig.safetyGuardian();\\n        compToken = previousQsConfig.compToken();\\n        safetyVaultRatio = previousQsConfig.safetyVaultRatio();\\n        safetyVault = previousQsConfig.safetyVault();\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(address[] calldata cTokens, uint[] calldata newBorrowCaps) external onlySafetyGuardian {\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            marketsCap[cTokens[i]].borrowCap = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the given flash loan caps for the given cToken markets. Borrowing that brings total flash cap to or above flash loan cap will revert.\\n     * @dev Admin function to set the flash loan caps. A flash loan cap of 0 corresponds to unlimited flash loan.\\n     * @param cTokens The addresses of the markets (tokens) to change the flash loan caps for\\n     * @param newFlashLoanCaps The new flash loan cap values in underlying to be set. A value of 0 corresponds to unlimited flash loan.\\n     */\\n    function _setMarketFlashLoanCaps(address[] calldata cTokens, uint[] calldata newFlashLoanCaps) external onlySafetyGuardian {\\n        uint numMarkets = cTokens.length;\\n        uint numFlashLoanCaps = newFlashLoanCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numFlashLoanCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            marketsCap[cTokens[i]].flashLoanCap = newFlashLoanCaps[i];\\n            emit NewFlashLoanCap(cTokens[i], newFlashLoanCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert.\\n     * @dev Admin function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n     * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n     */\\n    function _setMarketSupplyCaps(address[] calldata cTokens, uint[] calldata newSupplyCaps) external onlySafetyGuardian {\\n        uint numMarkets = cTokens.length;\\n        uint numSupplyCaps = newSupplyCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            marketsCap[cTokens[i]].supplyCap = newSupplyCaps[i];\\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\n        }\\n    }\\n    /**\\n     * @notice Sets whitelisted protocol's credit limit\\n     * @param protocol The address of the protocol\\n     * @param creditLimit The credit limit\\n     */\\n    function _setCreditLimit(address protocol, uint creditLimit) public onlyOwner {\\n        require(isContract(protocol), \\\"contract required\\\");\\n        require(creditLimits[protocol] != creditLimit, \\\"no change\\\");\\n\\n        creditLimits[protocol] = creditLimit;\\n        emit CreditLimitChanged(protocol, creditLimit);\\n    }\\n\\n    function _setCompToken(address _compToken) public onlyOwner {\\n        address oldCompToken = compToken;\\n        compToken = _compToken;\\n        emit NewCompToken(oldCompToken, compToken);\\n    }\\n\\n    function _setSafetyVault(address _safetyVault) public onlyOwner {\\n        address oldSafetyVault = safetyVault;\\n        safetyVault = _safetyVault;\\n        emit NewSafetyVault(oldSafetyVault, safetyVault);\\n    }\\n\\n    function _setSafetyVaultRatio(uint _safetyVaultRatio) public onlySafetyGuardian {\\n        require(_safetyVaultRatio < 1e18, \\\"!safetyVaultRatio\\\");\\n\\n        uint oldSafetyVaultRatio = safetyVaultRatio;\\n        safetyVaultRatio = _safetyVaultRatio;\\n        emit NewSafetyVaultRatio(oldSafetyVaultRatio, safetyVaultRatio);\\n    }\\n\\n    function _setPendingSafetyGuardian(address payable newPendingSafetyGuardian) external onlyOwner {\\n        address oldPendingSafetyGuardian = pendingSafetyGuardian;\\n        pendingSafetyGuardian = newPendingSafetyGuardian;\\n\\n        emit NewPendingSafetyGuardian(oldPendingSafetyGuardian, newPendingSafetyGuardian);\\n    }\\n\\n    function _acceptSafetyGuardian() external {\\n        require(msg.sender == pendingSafetyGuardian, \\\"!pendingSafetyGuardian\\\");\\n\\n        address oldPendingSafetyGuardian = pendingSafetyGuardian;\\n        address oldSafetyGuardian = safetyGuardian;\\n        safetyGuardian = pendingSafetyGuardian;\\n        pendingSafetyGuardian = address(0x0);\\n\\n        emit NewSafetyGuardian(oldSafetyGuardian, safetyGuardian);\\n        emit NewPendingSafetyGuardian(oldPendingSafetyGuardian, pendingSafetyGuardian);\\n    }\\n\\n    function getCreditLimit(address protocol) external view returns (uint) {\\n        return creditLimits[protocol];\\n    }\\n\\n    function getBorrowCap(address cToken) external view returns (uint) {\\n        return marketsCap[cToken].borrowCap;\\n    }\\n\\n    function getSupplyCap(address cToken) external view returns (uint) {\\n        return marketsCap[cToken].supplyCap;\\n    }\\n\\n    function getFlashLoanCap(address cToken) external view returns (uint) {\\n        return marketsCap[cToken].flashLoanCap;\\n    }\\n\\n    function calculateSeizeTokenAllocation(uint _seizeTokenAmount, uint liquidationIncentiveMantissa) public view returns(uint liquidatorAmount, uint safetyVaultAmount) {\\n        Exp memory vaultRatio = Exp({mantissa:safetyVaultRatio});\\n        (,Exp memory tmp) = mulScalar(vaultRatio, _seizeTokenAmount);\\n        safetyVaultAmount = div_(tmp, liquidationIncentiveMantissa).mantissa;\\n        liquidatorAmount = sub_(_seizeTokenAmount, safetyVaultAmount);\\n    }\\n\\n    function getCompAllocation(address user, uint userAccrued) public view returns(uint userAmount, uint governanceAmount) {\\n        if (!isContract(user) || whitelist[user]) {\\n            return (userAccrued, 0);\\n        }\\n\\n        Exp memory compRatioExp = Exp({mantissa:compRatio});\\n        (, userAmount) = mulScalarTruncate(compRatioExp, userAccrued);\\n        governanceAmount = sub_(userAccrued, userAmount);\\n    }\\n\\n    function getFlashFee(address borrower, address cToken, uint256 amount) external view returns (uint flashFee) {\\n        if (whitelist[borrower]) {\\n            return 0;\\n        }\\n        Exp memory flashLoanFeeRatioExp = Exp({mantissa:flashLoanFeeRatio});\\n        (, flashFee) = mulScalarTruncate(flashLoanFeeRatioExp, amount);\\n\\n        cToken;\\n    }\\n\\n    function _setCompRatio(uint _compRatio) public onlySafetyGuardian {\\n        require(_compRatio < 1e18, \\\"compRatio should be less then 100%\\\");\\n        uint oldCompRatio = compRatio;\\n        compRatio = _compRatio;\\n\\n        emit NewCompRatio(oldCompRatio, compRatio);\\n    }\\n\\n    function isBlocked(address user) public view returns (bool) {\\n        return blacklist[user];\\n    }\\n\\n    function _addToWhitelist(address _member) public onlySafetyGuardian {\\n        require(_member != address(0x0), \\\"Zero address is not allowed\\\");\\n        whitelist[_member] = true;\\n\\n        emit WhitelistChange(_member, true);\\n    }\\n\\n    function _removeFromWhitelist(address _member) public onlySafetyGuardian {\\n        require(_member != address(0x0), \\\"Zero address is not allowed\\\");\\n        whitelist[_member] = false;\\n\\n        emit WhitelistChange(_member, false);\\n    }\\n\\n    function _addToBlacklist(address _member) public onlySafetyGuardian {\\n        require(_member != address(0x0), \\\"Zero address is not allowed\\\");\\n        blacklist[_member] = true;\\n\\n        emit BlacklistChange(_member, true);\\n    }\\n\\n    function _removeFromBlacklist(address _member) public onlySafetyGuardian {\\n        require(_member != address(0x0), \\\"Zero address is not allowed\\\");\\n        blacklist[_member] = false;\\n\\n        emit BlacklistChange(_member, false);\\n    }\\n\\n    function _setFlashLoanFeeRatio(uint _feeRatio) public onlySafetyGuardian {\\n        require(_feeRatio != flashLoanFeeRatio, \\\"Same fee ratio already set\\\");\\n        require(_feeRatio < 1e18, \\\"Invalid fee ratio\\\");\\n\\n        uint oldFeeRatio = flashLoanFeeRatio;\\n        flashLoanFeeRatio = _feeRatio;\\n\\n        emit FlashLoanFeeRatioChanged(oldFeeRatio, flashLoanFeeRatio);\\n    }\\n\\n    function _setliquidityGauge(ILiquidityGauge _liquidityGauge) external onlySafetyGuardian {\\n        emit NewLiquidityGauge(address(liquidityGauge), address(_liquidityGauge));\\n\\n        liquidityGauge = _liquidityGauge;\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\",\"keccak256\":\"0xbba0b81c4574cc190df466ca2a5e766fd1bdc9c8f09298c6dba92389ac81c53a\"},\"contracts/Torchestroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./compound/Comptroller.sol\\\";\\nimport \\\"./compound/EIP20Interface.sol\\\";\\nimport \\\"./TorchesConfig.sol\\\";\\n\\ncontract Torchestroller is Comptroller {\\n\\n    TorchesConfig public torchesConfig;\\n\\n    function _setTorchesConfig(TorchesConfig _torchesConfig) public {\\n        require(msg.sender == admin);\\n\\n        torchesConfig = _torchesConfig;\\n    }\\n\\n    /**\\n     * @notice Sets new governance token distribution speed\\n     * @dev Admin function to set new token distribution speed\\n     */\\n    function _setCompSpeeds(address[] memory _allMarkets, uint[] memory _compSpeeds) public {\\n        // Check caller is admin\\n        require(msg.sender == admin);\\n\\n        require(_allMarkets.length == _compSpeeds.length);\\n\\n        for (uint i = 0; i < _allMarkets.length; i++) {\\n            _setCompSpeedInternal(_allMarkets[i], _compSpeeds[i]);\\n        }\\n    }\\n\\n    function _setCompSpeedInternal(address _cToken, uint _compSpeed) internal {\\n        Market storage market = markets[_cToken];\\n        if (market.isComped == false) {\\n             _addCompMarketInternal(_cToken);\\n        }\\n        uint currentCompSpeed = compSpeeds[_cToken];\\n        uint currentSupplySpeed = currentCompSpeed >> 128;\\n        uint currentBorrowSpeed = uint128(currentCompSpeed);\\n\\n        uint newSupplySpeed = _compSpeed >> 128;\\n        uint newBorrowSpeed = uint128(_compSpeed);\\n        if (currentSupplySpeed != newSupplySpeed) {\\n            updateCompSupplyIndex(_cToken);\\n        }\\n        if (currentBorrowSpeed != newBorrowSpeed) {\\n            Exp memory borrowIndex = Exp({mantissa: CToken(_cToken).borrowIndex()});\\n            updateCompBorrowIndex(_cToken, borrowIndex);\\n        }\\n        compSpeeds[_cToken] = _compSpeed;\\n    }\\n\\n\\n    function getCompAddress() public view returns (address) {\\n        return torchesConfig.compToken();\\n    }\\n    \\n    function calculateSeizeTokenAllocation(uint _seizeTokenAmount) public view returns(uint liquidatorAmount, uint safetyVaultAmount) {\\n        return torchesConfig.calculateSeizeTokenAllocation(_seizeTokenAmount, liquidationIncentiveMantissa);\\n    }\\n    \\n    function transferComp(address user, uint userAccrued, uint threshold) internal returns (uint) {\\n        address compAddress = getCompAddress();\\n        if (userAccrued >= threshold && userAccrued > 0 && compAddress != address(0x0)) {\\n            EIP20Interface comp = EIP20Interface(compAddress);\\n            uint compRemaining = comp.balanceOf(address(this));\\n            if (userAccrued <= compRemaining) {\\n                (uint userAmount, uint governanceAmount) = torchesConfig.getCompAllocation(user, userAccrued);\\n                if (userAmount > 0) comp.transfer(user, userAmount);\\n                if (governanceAmount > 0) comp.transfer(torchesConfig.safetyVault(), governanceAmount);\\n                return 0;\\n            }\\n        }\\n        return userAccrued;\\n    }\\n\\n    /**\\n      * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n      * @param cToken The market to verify the borrow against\\n      * @param borrower The account which would borrow the asset\\n      * @param borrowAmount The amount of underlying the account would borrow\\n      * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n      */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"paused\\\");\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        uint borrowCap = torchesConfig.getBorrowCap(cToken);\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"!cap\\\");\\n        }\\n\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function flashLoanAllowed(address cToken, address to, uint256 flashLoanAmount) view public returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"paused\\\");\\n        require(torchesConfig.whitelist(to), \\\"!whitelist\\\");\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        uint flashLoanCap = torchesConfig.getFlashLoanCap(cToken);\\n        require(flashLoanAmount <= flashLoanCap, \\\"cap reached\\\");\\n\\n        to;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function getFlashLoanCap(address cToken) view external returns (uint) {\\n        return torchesConfig.getFlashLoanCap(cToken);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\n        require(!torchesConfig.isBlocked(minter));\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken]);\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        uint supplyCap = torchesConfig.getSupplyCap(cToken);\\n\\n        // Supply cap of 0 corresponds to unlimited borrowing\\n        if (supplyCap != 0) {\\n            Exp memory exchangeRate = Exp({mantissa: CTokenInterface(cToken).exchangeRateStored()});\\n            uint totalSupplyUnderlying = mul_ScalarTruncate(exchangeRate, EIP20Interface(cToken).totalSupply());\\n            uint nextTotalSupplyUnderlying = add_(totalSupplyUnderlying, mintAmount);\\n            require(nextTotalSupplyUnderlying <= supplyCap, \\\">cap\\\");\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, minter, false);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n  * @notice Accrue COMP to the market by updating the supply index\\n  * @param cToken The market whose supply index to update\\n  */\\n    function updateCompSupplyIndex(address cToken) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint compSpeed = compSpeeds[cToken];\\n        // use first 128 bit as supplySpeed\\n        uint supplySpeed = compSpeed >> 128;\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = CToken(cToken).totalSupply();\\n            uint compAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\n            compSupplyState[cToken] = CompMarketState({\\n            index: safe224(index.mantissa, \\\">224bits\\\"),\\n            block: safe32(blockNumber, \\\">32bits\\\")\\n            });\\n        } else if (deltaBlocks > 0 && supplyState.index > 0) {\\n            supplyState.block = safe32(blockNumber, \\\">32bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     */\\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        // use last 128 bit as borrowSpeed\\n        uint borrowSpeed = uint128(compSpeeds[cToken]);\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n            uint compAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\n            compBorrowState[cToken] = CompMarketState({\\n            index: safe224(index.mantissa, \\\">224bits\\\"),\\n            block: safe32(blockNumber, \\\">32bits\\\")\\n            });\\n        } else if (deltaBlocks > 0 && borrowState.index > 0) {\\n            borrowState.block = safe32(blockNumber, \\\">32bits\\\");\\n        }\\n    }\\n\\n    /**\\n    * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n    * @param cTokenModify The market to hypothetically redeem/borrow in\\n    * @param account The account to determine liquidity for\\n    * @param redeemTokens The number of tokens to hypothetically redeem\\n    * @param borrowAmount The amount of underlying to hypothetically borrow\\n    * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n    *  without calculating accumulated interest.\\n    * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n    *          hypothetical account shortfall below collateral requirements)\\n    */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\n\\n        // If credit limit is set to MAX, no need to check account liquidity.\\n        if (torchesConfig.getCreditLimit(account) == uint(-1)) {\\n            return (Error.NO_ERROR, uint(-1), 0);\\n        }\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            vars.borrowFactorMantissa = Exp({mantissa: markets[address(asset)].borrowFactorMantissa});\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // borrowValue = borrowBalance / borrowFactor\\n            uint borrowValue = div_(vars.borrowBalance, vars.borrowFactorMantissa);\\n            // sumBorrowPlusEffects += oraclePrice * borrowValue\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowValue, vars.sumBorrowPlusEffects);\\n\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // borrowValue = borrowAmount / borrowFactor\\n                borrowValue = div_(borrowAmount, vars.borrowFactorMantissa);\\n                // sumBorrowPlusEffects += oraclePrice * borrowValue\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowValue, vars.sumBorrowPlusEffects);\\n            }\\n        }\\n\\n        // If credit limit is set, no need to consider collateral.\\n        if (torchesConfig.getCreditLimit(account) > 0) {\\n            vars.sumCollateral = torchesConfig.getCreditLimit(account);\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) public returns (uint) {\\n        require(torchesConfig.getCreditLimit(borrower) == 0 , \\\"credit\\\");\\n\\n        return super.liquidateBorrowAllowed(cTokenBorrowed, cTokenCollateral, liquidator, borrower, repayAmount);\\n    }\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) public returns (uint) {\\n        require(torchesConfig.getCreditLimit(borrower) == 0 , \\\"credit\\\");\\n\\n        return super.seizeAllowed(cTokenCollateral, cTokenBorrowed, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) public returns (uint) {\\n        require(torchesConfig.getCreditLimit(borrower) == 0 || payer == borrower, \\\"Payer != borrower\\\");\\n\\n        return super.repayBorrowAllowed(cToken, payer, borrower, repayAmount);\\n    }\\n\\n    function _supportMarket(CToken cToken) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0, borrowFactorMantissa: 1e18, liquidationIncentiveMantissa: 0});\\n\\n        _addMarketInternal(address(cToken));\\n\\n        emit MarketListed(cToken);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new price oracle for the comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oracle, newOracle);\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function safetyGuardian() external view returns (address) {\\n        return torchesConfig.safetyGuardian();\\n    }\\n\\n}\",\"keccak256\":\"0x9c10f31bf01366463d1595b306f3bec1a82faf2370798e3792b8ca2f33fdbf5a\"},\"contracts/compound/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"!once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"!>0\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"!comptroller\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"!interestRate\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n\\n        allowanceNew = sub_(startingAllowance, tokens);\\n        srcTokensNew = sub_(accountTokens[src], tokens);\\n        dstTokensNew = add_(accountTokens[dst], tokens);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        borrowBalance = borrowBalanceStoredInternal(account);\\n        exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        principalTimesIndex = mul_(borrowSnapshot.principal, borrowIndex);\\n        result = div_(principalTimesIndex, borrowSnapshot.interestIndex);\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = sub_(add_(totalCash, totalBorrows), totalReserves);\\n\\n            uint256 exchangeRate = div_(cashPlusBorrowsMinusReserves, Exp({mantissa: _totalSupply}));\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate too high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = sub_(currentBlockNumber, accrualBlockNumberPrior);\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n\\n        uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n\\n        uint256 totalBorrowsNew = add_(interestAccumulated, borrowsPrior);\\n\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n        vars.mintTokens = div_ScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = add_(totalSupply, vars.mintTokens);\\n        accountTokens[minter] = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            vars.redeemAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            vars.redeemTokens = div_ScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n\\n        vars.totalSupplyNew = sub_(totalSupply, vars.redeemTokens);\\n        vars.accountTokensNew = sub_(accountTokens[redeemer], vars.redeemTokens);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n        vars.accountBorrowsNew = add_(vars.accountBorrows, borrowAmount);\\n        vars.totalBorrowsNew = add_(totalBorrows, borrowAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        vars.accountBorrowsNew = sub_(vars.accountBorrows, vars.actualRepayAmount);\\n        vars.totalBorrowsNew = sub_(totalBorrows, vars.actualRepayAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        accrueInterest();\\n\\n        require(cTokenCollateral.accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR));\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"seize too much\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"not comptroller\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (uint256 error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = add_(totalReserves, actualAddAmount);\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(address payable to, uint reduceAmount) external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(to, reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(address payable to, uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(to, reduceAmount);\\n\\n        emit ReservesReduced(to, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"invalid IRM\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x65a624dfa06d8c212d635787a2ac00e3c04deee4683da151ce11720832ae5a8e\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(address payable to, uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n    function sweepToken(EIP20NonStandardInterface token) external;\\n    function gulp() external;\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegationStorageExtension is CDelegationStorage {\\n    /**\\n    * @notice Internal cash counter for this CToken. Should equal underlying.balanceOf(address(this)) for CERC20.\\n    */\\n    uint256 public internalCash;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\\ncontract CCapableDelegateInterface is CDelegationStorageExtension {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\",\"keccak256\":\"0x55ed57acfdcb261ec35915df1398fa65e6696943e2cca353b55d059f982537c7\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/compound/Comptroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ncontract Comptroller is ComptrollerV3Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when market comped status is changed\\n    event MarketComped(CToken cToken, bool isComped);\\n\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\n    event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\\n\\n    /// @notice Emitted when borrow factor for a cToken is changed\\n    event NewBorrowFactor(CToken indexed cToken, uint newBorrowFactor);\\n\\n\\n    /// @notice The threshold above which the flywheel transfers COMP, in wei\\n    uint public constant compClaimThreshold = 0.001e18;\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa must be no less than this value\\n    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n    // liquidationIncentiveMantissa must be no greater than this value\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n    // borrowFactorMantissa must not exceed this value\\n    uint256 internal constant borrowFactorMaxMantissa = 1e18; // 1.0\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            results[i] = uint(addToMarketInternal(cToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"!snapshot\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(cToken, msg.sender);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, redeemer, false);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        // Shh - currently unused\\n        cToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) public returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) public returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        uint256 maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) public returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cTokenCollateral);\\n        distributeSupplierComp(cTokenCollateral, borrower, false);\\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, src, false);\\n        distributeSupplierComp(cToken, dst, false);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n        Exp borrowFactorMantissa;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\n        return getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) internal view returns (Error, uint, uint);\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        uint liquidationIncentive = getLiquidationIncentive(cTokenCollateral);\\n        numerator = mul_(Exp({mantissa: liquidationIncentive}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    function getLiquidationIncentive(address cToken) public view returns (uint) {\\n        uint cTokenLiquidationIncentive = markets[cToken].liquidationIncentiveMantissa;\\n        if (cTokenLiquidationIncentive == 0) return liquidationIncentiveMantissa;\\n        return cTokenLiquidationIncentive;\\n    }\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new price oracle for the comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint);\\n\\n    /**\\n      * @notice Sets the closeFactor used when liquidating borrows\\n      * @dev Admin function to set closeFactor\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n        }\\n\\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        emit NewCloseFactor(closeFactorMantissa, newCloseFactorMantissa);\\n        closeFactorMantissa = newCloseFactorMantissa;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, market.collateralFactorMantissa, newCollateralFactorMantissa);\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        // Check de-scaled min <= newLiquidationIncentive <= max\\n        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\\n        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(market.liquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the market to the markets mapping and set it as listed\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param cToken The address of the market (token) to list\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportMarket(CToken cToken) external returns (uint);\\n\\n    function _addMarketInternal(address cToken) internal {\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n    }\\n\\n    /**\\n     * @notice Set the given borrow factors for the given cToken markets.\\n     * @dev Admin function to set the borrow factors.\\n     * @param cToken The addresses of the markets (tokens) to change the borrow factors for\\n     * @param newBorrowFactor The new borrow factor values in underlying to be set. Must be between (0, 1]\\n     */\\n    function _setBorrowFactor(CToken cToken, uint newBorrowFactor) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        require(newBorrowFactor > 0 && newBorrowFactor <= borrowFactorMaxMantissa, \\\"!borrowFactor\\\");\\n\\n        markets[address(cToken)].borrowFactorMantissa = newBorrowFactor;\\n        emit NewBorrowFactor(cToken, newBorrowFactor);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) external returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!admin\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) external returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!admin\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!admin\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) external returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!admin\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(Unitroller unitroller) public {\\n        require(msg.sender == unitroller.admin(), \\\"!admin\\\");\\n        require(unitroller._acceptImplementation() == 0, \\\"!authorized\\\");\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\n    }\\n\\n    /*** Comp Distribution ***/\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateCompSupplyIndex(address cToken) internal;\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     */\\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal;\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierComp(address cToken, address supplier, bool distributeAll) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\n        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});\\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = compInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = transferComp(supplier, supplierAccrued, distributeAll ? 0 : compClaimThreshold);\\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex, bool distributeAll) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\n        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});\\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n            compAccrued[borrower] = transferComp(borrower, borrowerAccrued, distributeAll ? 0 : compClaimThreshold);\\n            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n        }\\n    }\\n\\n    function transferComp(address user, uint userAccrued, uint threshold) internal returns (uint);\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeBorrowerComp(address(cToken), holders[j], borrowIndex, true);\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndex(address(cToken));\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeSupplierComp(address(cToken), holders[j], true);\\n                }\\n            }\\n        }\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    function _addCompMarketInternal(address cToken) internal {\\n        Market storage market = markets[cToken];\\n        require(market.isListed == true, \\\"!listed\\\");\\n        require(market.isComped == false, \\\"already added\\\");\\n\\n        market.isComped = true;\\n        emit MarketComped(CToken(cToken), true);\\n\\n        if (compSupplyState[cToken].index == 0 && compSupplyState[cToken].block == 0) {\\n            compSupplyState[cToken] = CompMarketState({\\n                index: compInitialIndex,\\n                block: safe32(getBlockNumber(), \\\">32 bits\\\")\\n            });\\n        }\\n\\n        if (compBorrowState[cToken].index == 0 && compBorrowState[cToken].block == 0) {\\n            compBorrowState[cToken] = CompMarketState({\\n                index: compInitialIndex,\\n                block: safe32(getBlockNumber(), \\\">32 bits\\\")\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    function getBlockNumber() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Return the address of the COMP token\\n     * @return The address of COMP\\n     */\\n    function getCompAddress() public view returns (address);\\n}\\n\",\"keccak256\":\"0xa5f3e179cbbecf09adfa436f02f7b4cc86f05ad36a04a950d85ad03a5c1b9395\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n\\n    function getLiquidationIncentive(address cTokenCollateral) public view returns (uint);\\n\\n    function safetyGuardian() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f66ef6bf890508c9597909b8c980762de6af5abee4d8ab627b1a5d578a7604\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n\\n        /**\\n         *  @notice Multiplier representing the most one can borrow the asset.\\n         *  For instance, 0.5 to allow borrowing this asset 50% * collateral value * collateralFactor.\\n         *  When calculating equity, 0.5 with 100 borrow balance will produce 200 borrow value\\n         *  Must be between (0, 1], and stored as a mantissa.\\n         */\\n        uint borrowFactorMantissa;\\n\\n        /**\\n         * @notice Multiplier representing the discount on collateral that a liquidator receives\\n         */\\n        uint liquidationIncentiveMantissa;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\",\"keccak256\":\"0x7d52a830c25ac9152af44c5fcfb41e92e4af178ef0d313df81dab7b1c5da0f72\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/compound/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function div_ScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        uint256 numerator = mul_(expScale, scalar);\\n        return Exp({mantissa: div_(numerator, divisor)});\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function div_ScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (uint256) {\\n        Exp memory fraction = div_ScalarByExp(scalar, divisor);\\n        return truncate(fraction);\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xfd57860466b4dc28cd401fcbfcf1aa9a4f34468d213e4ca2bc8aa463610b8060\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8646fd17935fdbd93d4edc0211e94c6e6e6d90696bd2270d46ede2a8da4509df\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b03191633179055615bd4806100256000396000f3fe608060405234801561001057600080fd5b50600436106104115760003560e01c80638e8f294b11610220578063c488847b11610130578063dd09c4f8116100b8578063e875544611610087578063e87554461461108f578063e9af029214611097578063eabe7d91146110bd578063ede4edd0146110f3578063f851a4401461111957610411565b8063dd09c4f81461102d578063e0fbf09d14611035578063e4028eee1461105b578063e6653f3d1461108757610411565b8063d02f7351116100ff578063d02f735114610f57578063d686e9ee14610f9d578063da3d454c14610fc3578063dce1544914610ff9578063dcfbc0c71461102557610411565b8063c488847b14610ea7578063c9e3016414610edd578063ca0af04314610f03578063cc7ebdc414610f3157610411565b8063a7f0e231116101b3578063b0772d0b11610182578063b0772d0b14610d8c578063b21be7fd14610d94578063bb82aa5e14610dc2578063bdcdc25814610dca578063c299823814610e0657610411565b8063a7f0e23114610ce2578063aa90075414610d06578063abfceffc14610d0e578063ac0b0bb714610d8457610411565b806394b2294b116101ef57806394b2294b14610c805780639d1b5a0a14610c885780639d8cc5c414610c90578063a76b3fda14610cbc57610411565b80638e8f294b14610bb45780638ebf636414610c07578063903e679c14610c26578063929fe9a114610c5257610411565b80634fd42e17116103265780636d154ea5116102ae5780637e60c7a01161027d5780637e60c7a014610a255780638730657714610b4857806387f7630314610b7e5780638a0b5eef14610b865780638c57804e14610b8e57610411565b80636d154ea5146109c9578063731f0c2b146109ef578063747026c914610a155780637dc0d1d014610a1d57610411565b80635ec88c79116102f55780635ec88c79146107bd5780635f5af1aa146107e35780635fc7e71e146108095780636810dfa61461084f5780636b79c38d1461097b57610411565b80634fd42e171461072157806351dff9891461073e57806352d84d1e1461077a57806355ee1fe11461079757610411565b80632af2914b116103a95780633c94786f116103785780633c94786f1461067957806342cbb15c146106815780634ada90af146106895780634e79238f146106915780634ef4c3e1146106eb57610411565b80632af2914b146105d95780632d70db781461060f578063317b0b771461062e5780633bcf7ec11461064b57610411565b80631d7b33d7116103e55780631d7b33d71461053957806324008a621461057157806324a3d622146105ad57806326782247146105d157610411565b80627e3dd21461041657806318c882a5146104325780631c3db2e0146104605780631d504dc614610513575b600080fd5b61041e611121565b604080519115158252519081900360200190f35b61041e6004803603604081101561044857600080fd5b506001600160a01b0381351690602001351515611126565b6105116004803603604081101561047657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104a057600080fd5b8201836020820111156104b257600080fd5b803590602001918460208302840111600160201b831117156104d357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611260945050505050565b005b6105116004803603602081101561052957600080fd5b50356001600160a01b03166112c2565b61055f6004803603602081101561054f57600080fd5b50356001600160a01b0316611416565b60408051918252519081900360200190f35b61055f6004803603608081101561058757600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611428565b6105b561151e565b604080516001600160a01b039092168252519081900360200190f35b6105b561152d565b61055f600480360360608110156105ef57600080fd5b506001600160a01b0381358116916020810135909116906040013561153c565b61041e6004803603602081101561062557600080fd5b50351515611744565b61055f6004803603602081101561064457600080fd5b5035611818565b61041e6004803603604081101561066157600080fd5b506001600160a01b0381351690602001351515611925565b61041e611a5a565b61055f611a6a565b61055f611a6f565b6106cd600480360360808110156106a757600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611a75565b60408051938452602084019290925282820152519081900360600190f35b61055f6004803603606081101561070157600080fd5b506001600160a01b03813581169160208101359091169060400135611aaf565b61055f6004803603602081101561073757600080fd5b5035611d66565b6105116004803603608081101561075457600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d8e565b6105b56004803603602081101561079057600080fd5b5035611de8565b61055f600480360360208110156107ad57600080fd5b50356001600160a01b0316611e0f565b6106cd600480360360208110156107d357600080fd5b50356001600160a01b0316611e98565b61055f600480360360208110156107f957600080fd5b50356001600160a01b0316611ecd565b61055f600480360360a081101561081f57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611f53565b6105116004803603608081101561086557600080fd5b810190602081018135600160201b81111561087f57600080fd5b82018360208201111561089157600080fd5b803590602001918460208302840111600160201b831117156108b257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561090157600080fd5b82018360208201111561091357600080fd5b803590602001918460208302840111600160201b8311171561093457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505050803515159150602001351515612024565b6109a16004803603602081101561099157600080fd5b50356001600160a01b03166121c6565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61041e600480360360208110156109df57600080fd5b50356001600160a01b03166121f0565b61041e60048036036020811015610a0557600080fd5b50356001600160a01b0316612205565b61055f61221a565b6105b5612225565b61051160048036036040811015610a3b57600080fd5b810190602081018135600160201b811115610a5557600080fd5b820183602082011115610a6757600080fd5b803590602001918460208302840111600160201b83111715610a8857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610ad757600080fd5b820183602082011115610ae957600080fd5b803590602001918460208302840111600160201b83111715610b0a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612234945050505050565b610b6560048036036020811015610b5e57600080fd5b503561229d565b6040805192835260208301919091528051918290030190f35b61041e612330565b6105b5612340565b6109a160048036036020811015610ba457600080fd5b50356001600160a01b031661234f565b610bda60048036036020811015610bca57600080fd5b50356001600160a01b0316612379565b60408051951515865260208601949094529115158484015260608401526080830152519081900360a00190f35b61041e60048036036020811015610c1d57600080fd5b503515156123ae565b61055f60048036036040811015610c3c57600080fd5b506001600160a01b038135169060200135612481565b61041e60048036036040811015610c6857600080fd5b506001600160a01b03813581169160200135166125cd565b61055f612600565b6105b5612606565b61051160048036036040811015610ca657600080fd5b506001600160a01b03813516906020013561267c565b61055f60048036036020811015610cd257600080fd5b50356001600160a01b0316612774565b610cea6128f7565b604080516001600160e01b039092168252519081900360200190f35b61055f61290a565b610d3460048036036020811015610d2457600080fd5b50356001600160a01b0316612910565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610d70578181015183820152602001610d58565b505050509050019250505060405180910390f35b61041e612999565b610d346129a9565b61055f60048036036040811015610daa57600080fd5b506001600160a01b0381358116916020013516612a0b565b6105b5612a28565b61055f60048036036080811015610de057600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612a37565b610d3460048036036020811015610e1c57600080fd5b810190602081018135600160201b811115610e3657600080fd5b820183602082011115610e4857600080fd5b803590602001918460208302840111600160201b83111715610e6957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612acb945050505050565b610b6560048036036060811015610ebd57600080fd5b506001600160a01b03813581169160208101359091169060400135612b62565b61051160048036036020811015610ef357600080fd5b50356001600160a01b0316612d96565b61055f60048036036040811015610f1957600080fd5b506001600160a01b0381358116916020013516612dcf565b61055f60048036036020811015610f4757600080fd5b50356001600160a01b0316612dec565b61055f600480360360a0811015610f6d57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135612dfe565b61055f60048036036020811015610fb357600080fd5b50356001600160a01b0316612ec3565b61055f60048036036060811015610fd957600080fd5b506001600160a01b03813581169160208101359091169060400135612eee565b6105b56004803603604081101561100f57600080fd5b506001600160a01b038135169060200135613301565b6105b5613336565b6105b5613345565b61055f6004803603602081101561104b57600080fd5b50356001600160a01b031661338a565b61055f6004803603604081101561107157600080fd5b506001600160a01b03813516906020013561340d565b61041e6135a3565b61055f6135b3565b610511600480360360208110156110ad57600080fd5b50356001600160a01b03166135b9565b61055f600480360360608110156110d357600080fd5b506001600160a01b0381358116916020810135909116906040013561361d565b61055f6004803603602081101561110957600080fd5b50356001600160a01b031661363a565b6105b561394f565b600181565b6001600160a01b03821660009081526009602052604081205460ff1661117d576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600a546001600160a01b03163314806111a057506000546001600160a01b031633145b6111da576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6001600160a01b0383166000818152600c6020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260069083015265426f72726f7760d01b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150805b92915050565b60408051600180825281830190925260609160208083019080388339019050509050828160008151811061129057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506112bd8183600180612024565b505050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156112fb57600080fd5b505afa15801561130f573d6000803e3d6000fd5b505050506040513d602081101561132557600080fd5b50516001600160a01b0316331461136c576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113a757600080fd5b505af11580156113bb573d6000803e3d6000fd5b505050506040513d60208110156113d157600080fd5b505115611413576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b50565b600f6020526000908152604090205481565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b15801561147957600080fd5b505afa15801561148d573d6000803e3d6000fd5b505050506040513d60208110156114a357600080fd5b505115806114c25750826001600160a01b0316846001600160a01b0316145b611507576040805162461bcd60e51b81526020600482015260116024820152702830bcb2b910109e903137b93937bbb2b960791b604482015290519081900360640190fd5b6115138585858561395e565b90505b949350505050565b600a546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b0383166000908152600c602052604081205460ff1615611593576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b60155460408051634d8c928d60e11b81526001600160a01b03868116600483015291519190921691639b19251a916024808301926020929190829003018186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d602081101561160a57600080fd5b505161164a576040805162461bcd60e51b815260206004820152600a602482015269085dda1a5d195b1a5cdd60b21b604482015290519081900360640190fd5b6001600160a01b03841660009081526009602052604090205460ff166116745760095b905061173d565b6015546040805163e0fbf09d60e01b81526001600160a01b0387811660048301529151600093929092169163e0fbf09d91602480820192602092909190829003018186803b1580156116c557600080fd5b505afa1580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b5051905080831115611736576040805162461bcd60e51b815260206004820152600b60248201526a18d85c081c995858da195960aa1b604482015290519081900360640190fd5b60005b9150505b9392505050565b600a546000906001600160a01b031633148061176a57506000546001600160a01b031633145b6117a4576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b600a8054831515600160b81b810260ff60b81b1990921691909117909155604080516020810192909252808252600582820152645365697a6560d81b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a150805b919050565b600080546001600160a01b0316331461183e5761183760016004613a19565b9050611813565b611846615ad3565b50604080516020810190915282815261185d615ad3565b50604080516020810190915266b1a2bc2ec50000815261187d8282613a7f565b156118965761188d600580613a19565b92505050611813565b61189e615ad3565b506040805160208101909152670c7d713b49da000081526118bf8184613a87565b156118d9576118cf600580613a19565b9350505050611813565b600554604080519182526020820187905280517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd99281900390910190a150505060059190915550600090565b6001600160a01b03821660009081526009602052604081205460ff1661197c576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600a546001600160a01b031633148061199f57506000546001600160a01b031633145b6119d9576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6001600160a01b0383166000818152600b6020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260049083015263135a5b9d60e21b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150919050565b600a54600160a01b900460ff1681565b435b90565b60065481565b600080600080600080611a8a8a8a8a8a613a8e565b925092509250826011811115611a9c57fe5b95509093509150505b9450945094915050565b6015546040805163fbac395160e01b81526001600160a01b0385811660048301529151600093929092169163fbac395191602480820192602092909190829003018186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d6020811015611b2a57600080fd5b505115611b3657600080fd5b6001600160a01b0384166000908152600b602052604090205460ff1615611b5c57600080fd5b6001600160a01b03841660009081526009602052604090205460ff16611b8357600961166d565b601554604080516321636b8b60e21b81526001600160a01b0387811660048301529151600093929092169163858dae2c91602480820192602092909190829003018186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d6020811015611bfe57600080fd5b505190508015611d5157611c10615ad3565b6040518060200160405280876001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5457600080fd5b505afa158015611c68573d6000803e3d6000fd5b505050506040513d6020811015611c7e57600080fd5b50519052604080516318160ddd60e01b81529051919250600091611cff9184916001600160a01b038b16916318160ddd916004808301926020929190829003018186803b158015611cce57600080fd5b505afa158015611ce2573d6000803e3d6000fd5b505050506040513d6020811015611cf857600080fd5b5051613f9d565b90506000611d0d8287613fbc565b905083811115611d4d576040805162461bcd60e51b8152602060048083019190915260248201526303e6361760e41b604482015290519081900360640190fd5b5050505b611d5a85613ff2565b61173685856000614273565b600080546001600160a01b03163314611d85576118376001600b613a19565b50600655600090565b80158015611d9c5750600082115b15611de2576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b600d8181548110611df557fe5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b03163314611e2e5761183760016010613a19565b600454604080516001600160a01b039283168152918416602083015280517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e229281900390910190a1600480546001600160a01b0319166001600160a01b038416179055600061125a565b600080600080600080611eaf876000806000613a8e565b925092509250826011811115611ec157fe5b97919650945092505050565b600080546001600160a01b03163314611eec5761183760016013613a19565b600a80546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9281900390910190a160009392505050565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015611fa457600080fd5b505afa158015611fb8573d6000803e3d6000fd5b505050506040513d6020811015611fce57600080fd5b50511561200b576040805162461bcd60e51b815260206004820152600660248201526518dc99591a5d60d21b604482015290519081900360640190fd5b6120188686868686614473565b90505b95945050505050565b60005b83518110156121bf57600084828151811061203e57fe5b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff166120a5576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b6001841515141561216d576120b8615ad3565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b50519052905061213682826145d6565b60005b875181101561216a576121628389838151811061215257fe5b6020026020010151846001614865565b600101612139565b50505b600183151514156121b65761218181613ff2565b60005b86518110156121b4576121ac8288838151811061219d57fe5b60200260200101516001614273565b600101612184565b505b50600101612027565b5050505050565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b66038d7ea4c6800081565b6004546001600160a01b031681565b6000546001600160a01b0316331461224b57600080fd5b805182511461225957600080fd5b60005b82518110156112bd5761229583828151811061227457fe5b602002602001015183838151811061228857fe5b6020026020010151614a48565b60010161225c565b60155460065460408051630655a3bd60e11b8152600481018590526024810192909252805160009384936001600160a01b0390911692630cab477a92604480840193829003018186803b1580156122f357600080fd5b505afa158015612307573d6000803e3d6000fd5b505050506040513d604081101561231d57600080fd5b5080516020909101519092509050915091565b600a54600160b01b900460ff1681565b6015546001600160a01b031681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6009602052600090815260409020805460018201546003830154600484015460059094015460ff938416949293909116919085565b600a546000906001600160a01b03163314806123d457506000546001600160a01b031633145b61240e576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b600a8054831515600160b01b810260ff60b01b1990921691909117909155604080516020810192909252808252600882820152672a3930b739b332b960c11b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a15090565b600080546001600160a01b031633146124a7576124a06001600b613a19565b905061125a565b6001600160a01b0383166000908152600960205260409020805460ff166124dc576124d460096007613a19565b91505061125a565b6124e4615ad3565b5060408051602081019091528381526124fb615ad3565b506040805160208101909152670de0b6b3a7640000815261251c8282613a87565b156125375761252d6007600c613a19565b935050505061125a565b61253f615ad3565b5060408051602081019091526714d1120d7b16000081526125608184613a87565b1561257c576125716007600c613a19565b94505050505061125a565b6005840154604080519182526020820188905280517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169281900390910190a150505060050191909155506000919050565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b60075481565b60155460408051636605dfa760e01b815290516000926001600160a01b031691636605dfa7916004808301926020929190829003018186803b15801561264b57600080fd5b505afa15801561265f573d6000803e3d6000fd5b505050506040513d602081101561267557600080fd5b5051905090565b6000546001600160a01b031633146126c4576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6000811180156126dc5750670de0b6b3a76400008111155b61271d576040805162461bcd60e51b815260206004820152600d60248201526c10b137b93937bba330b1ba37b960991b604482015290519081900360640190fd5b6001600160a01b038216600081815260096020908152604091829020600401849055815184815291517f06ba34ca74586d7d83f17a9e4054760897dda97278c46bd8bdf829f72afb66609281900390910190a25050565b600080546001600160a01b031633146127935761183760016012613a19565b6001600160a01b03821660009081526009602052604090205460ff16156127c057611837600a6011613a19565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d602081101561282357600080fd5b50506040805160a081018252600180825260006020838101828152848601838152670de0b6b3a764000060608701908152608087018581526001600160a01b038b1686526009909452969093209451855490151560ff19918216178655905193850193909355905160038401805491151591909316179091559151600482015590516005909101556128b482614b6a565b604080516001600160a01b038416815290517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9181900360200190a1600061125a565b6ec097ce7bc90715b34b9f100000000081565b600e5481565b60608060086000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561298c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161296e575b5093979650505050505050565b600a54600160b81b900460ff1681565b6060600d805480602002602001604051908101604052809291908181526020018280548015612a0157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129e3575b5050505050905090565b601260209081526000928352604080842090915290825290205481565b6002546001600160a01b031681565b600a54600090600160b01b900460ff1615612a82576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6000612a8f868685614c48565b90508015612a9e579050611516565b612aa786613ff2565b612ab386866000614273565b612abf86856000614273565b60009695505050505050565b6060600082519050606081604051908082528060200260200182016040528015612aff578160200160208202803883390190505b50905060005b82811015612b5a576000858281518110612b1b57fe5b60200260200101519050612b2f8133614cf4565b6011811115612b3a57fe5b838381518110612b4657fe5b602090810291909101015250600101612b05565b509392505050565b600480546040805163fc57d4df60e01b81526001600160a01b038781169482019490945290516000938493849391169163fc57d4df91602480820192602092909190829003018186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d6020811015612be257600080fd5b5051600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051939450600093929091169163fc57d4df91602480820192602092909190829003018186803b158015612c3b57600080fd5b505afa158015612c4f573d6000803e3d6000fd5b505050506040513d6020811015612c6557600080fd5b50519050811580612c74575080155b15612c8957600d935060009250612d8e915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc457600080fd5b505afa158015612cd8573d6000803e3d6000fd5b505050506040513d6020811015612cee57600080fd5b505190506000612cfc615ad3565b612d04615ad3565b612d0c615ad3565b6000612d178c612ec3565b9050612d3f60405180602001604052808381525060405180602001604052808b815250614dea565b9350612d67604051806020016040528089815250604051806020016040528089815250614dea565b9250612d738484614e29565b9150612d7f828c613f9d565b60009a50985050505050505050505b935093915050565b6000546001600160a01b03163314612dad57600080fd5b601580546001600160a01b0319166001600160a01b0392909216919091179055565b601360209081526000928352604080842090915290825290205481565b60146020526000908152604090205481565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015612e4f57600080fd5b505afa158015612e63573d6000803e3d6000fd5b505050506040513d6020811015612e7957600080fd5b505115612eb6576040805162461bcd60e51b815260206004820152600660248201526518dc99591a5d60d21b604482015290519081900360640190fd5b6120188686868686614e65565b6001600160a01b0381166000908152600960205260408120600501548061125a575050600654611813565b6001600160a01b0383166000908152600c602052604081205460ff1615612f45576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6001600160a01b03841660009081526009602052604090205460ff16612f6c57600961166d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661304e57336001600160a01b03851614612fe4576040805162461bcd60e51b815260206004820152600760248201526610b1aa37b5b2b760c91b604482015290519081900360640190fd5b6000612ff03385614cf4565b9050600081601181111561300057fe5b146130195780601181111561301157fe5b91505061173d565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff1661304c57fe5b505b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801561309f57600080fd5b505afa1580156130b3573d6000803e3d6000fd5b505050506040513d60208110156130c957600080fd5b50516130d657600d61166d565b60155460408051630f5a372160e21b81526001600160a01b03878116600483015291516000939290921691633d68dc8491602480820192602092909190829003018186803b15801561312757600080fd5b505afa15801561313b573d6000803e3d6000fd5b505050506040513d602081101561315157600080fd5b505190508015613212576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561319657600080fd5b505afa1580156131aa573d6000803e3d6000fd5b505050506040513d60208110156131c057600080fd5b5051905060006131d08286613fbc565b905082811061320f576040805162461bcd60e51b815260206004808301919091526024820152630216361760e41b604482015290519081900360640190fd5b50505b6000806132228688600088613a8e565b9193509091506000905082601181111561323857fe5b146132535781601181111561324957fe5b935050505061173d565b8015613260576004613249565b613268615ad3565b6040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ac57600080fd5b505afa1580156132c0573d6000803e3d6000fd5b505050506040513d60208110156132d657600080fd5b5051905290506132e688826145d6565b6132f38888836000614865565b600098975050505050505050565b6008602052816000526040600020818154811061331a57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60155460408051631ba1389f60e31b815290516000926001600160a01b03169163dd09c4f8916004808301926020929190829003018186803b15801561264b57600080fd5b6015546040805163e0fbf09d60e01b81526001600160a01b0384811660048301529151600093929092169163e0fbf09d91602480820192602092909190829003018186803b1580156133db57600080fd5b505afa1580156133ef573d6000803e3d6000fd5b505050506040513d602081101561340557600080fd5b505192915050565b600080546001600160a01b0316331461342c576124a060016006613a19565b6001600160a01b0383166000908152600960205260409020805460ff16613459576124d460096007613a19565b613461615ad3565b506040805160208101909152838152613478615ad3565b506040805160208101909152670c7d713b49da000081526134998183613a87565b156134aa5761252d60066008613a19565b84158015906135335750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801561350557600080fd5b505afa158015613519573d6000803e3d6000fd5b505050506040513d602081101561352f57600080fd5b5051155b156135445761252d600d6009613a19565b6001830154604080516001600160a01b03891681526020810192909252818101879052517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a1505060010191909155506000919050565b600a54600160a81b900460ff1681565b60055481565b61141381600d80548060200260200160405190810160405280929190818152602001828054801561361357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116135f5575b5050505050611260565b60008061362b858585614c48565b90508015611d5157905061173d565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801561369b57600080fd5b505afa1580156136af573d6000803e3d6000fd5b505050506040513d60808110156136c557600080fd5b50805160208201516040909201519094509092509050821561371a576040805162461bcd60e51b8152602060048201526009602482015268085cdb985c1cda1bdd60ba1b604482015290519081900360640190fd5b80156137375761372c600c6002613a19565b945050505050611813565b6000613744873385614c48565b9050801561376557613759600e60038361500f565b95505050505050611813565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166137a45760009650505050505050611813565b3360009081526002820160209081526040808320805460ff19169055600882529182902080548351818402810184019094528084526060939283018282801561381657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116137f8575b5050835193945083925060009150505b8281101561386b57896001600160a01b031684828151811061384457fe5b60200260200101516001600160a01b031614156138635780915061386b565b600101613826565b5081811061387557fe5b33600090815260086020526040902080548190600019810190811061389657fe5b9060005260206000200160009054906101000a90046001600160a01b03168183815481106138c057fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580546138f9826000198301615ae6565b50604080516001600160a01b038c16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009c9b505050505050505050505050565b6000546001600160a01b031681565b6001600160a01b03841660009081526009602052604081205460ff1661398657506009611516565b61398e615ad3565b6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d257600080fd5b505afa1580156139e6573d6000803e3d6000fd5b505050506040513d60208110156139fc57600080fd5b505190529050613a0c86826145d6565b612abf8685836000614865565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115613a4857fe5b836013811115613a5457fe5b604080519283526020830191909152600082820152519081900360600190a182601181111561173d57fe5b519051111590565b5190511090565b60155460408051632c333e2560e01b81526001600160a01b038781166004830152915160009384938493600019939190921691632c333e25916024808301926020929190829003018186803b158015613ae657600080fd5b505afa158015613afa573d6000803e3d6000fd5b505050506040513d6020811015613b1057600080fd5b50511415613b28575060009150600019905081611aa5565b613b30615b0a565b6001600160a01b03881660009081526008602090815260408083208054825181850281018501909352808352606093830182828015613b9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b7a575b50939450600093505050505b8151811015613e5f576000828281518110613bbb57fe5b60200260200101519050806001600160a01b031663c37f68e28d6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015613c1b57600080fd5b505afa158015613c2f573d6000803e3d6000fd5b505050506040513d6080811015613c4557600080fd5b508051602082015160408084015160609485015160808b0152938901939093529187019190915293508315613c8a5750600f965060009550859450611aa59350505050565b60408051602080820183526001600160a01b03808516600081815260098085528682206001810154875260c08d01969096528651808601885291839052845260049485015481526101408b01528451808401865260808b0151815260e08b01528354855163fc57d4df60e01b815294850191909152935193169263fc57d4df926024808201939291829003018186803b158015613d2657600080fd5b505afa158015613d3a573d6000803e3d6000fd5b505050506040513d6020811015613d5057600080fd5b505160a08601819052613d735750600d965060009550859450611aa59350505050565b604080516020810190915260a0860151815261010086015260c085015160e0860151613dad91613da291614dea565b866101000151614dea565b610120860181905260408601518651613dc7929190615075565b85526060850151610140860151600091613de09161509d565b9050613df6866101000151828860200151615075565b60208701526001600160a01b03828116908d161415613e5557613e238661012001518c8860200151615075565b6020870152610140860151613e39908b9061509d565b9050613e4f866101000151828860200151615075565b60208701525b5050600101613ba4565b5060155460408051632c333e2560e01b81526001600160a01b038d8116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015613eb157600080fd5b505afa158015613ec5573d6000803e3d6000fd5b505050506040513d6020811015613edb57600080fd5b50511115613f5f5760155460408051632c333e2560e01b81526001600160a01b038d8116600483015291519190921691632c333e25916024808301926020929190829003018186803b158015613f3057600080fd5b505afa158015613f44573d6000803e3d6000fd5b505050506040513d6020811015613f5a57600080fd5b505183525b602083015183511115613f845750506020810151905160009450039150829050611aa5565b5050805160209091015160009450849350039050611aa5565b6000613fa7615ad3565b613fb184846150bb565b9050611516816150dc565b600061173d8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506150eb565b6001600160a01b0381166000908152601060209081526040808320600f9092528220549091608082901c90614025611a6a565b8454909150600090614045908390600160e01b900463ffffffff16615186565b90506000811180156140575750600083115b15614204576000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561409757600080fd5b505afa1580156140ab573d6000803e3d6000fd5b505050506040513d60208110156140c157600080fd5b5051905060006140d183866151c0565b90506140db615ad3565b600083116140f85760405180602001604052806000815250614102565b6141028284615202565b905061410c615ad3565b604080516020810190915289546001600160e01b0316815261412e9083615237565b905060405180604001604052806141698360000151604051806040016040528060088152602001673e3232346269747360c01b81525061525c565b6001600160e01b031681526020016141a088604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b63ffffffff9081169091526001600160a01b038c166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061426b92505050565b60008111801561421d575084546001600160e01b031615155b1561426b5761424b82604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b855463ffffffff91909116600160e01b026001600160e01b039091161785555b505050505050565b6001600160a01b0383166000908152601060205260409020614293615ad3565b50604080516020810190915281546001600160e01b031681526142b4615ad3565b5060408051602080820183526001600160a01b038089166000908152601283528481209189168082528284529481208054855286519590915291529190915580511580156143025750815115155b1561431a576ec097ce7bc90715b34b9f100000000081525b614322615ad3565b61432c838361530e565b90506000876001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561438657600080fd5b505afa15801561439a573d6000803e3d6000fd5b505050506040513d60208110156143b057600080fd5b5051905060006143c08284615333565b6001600160a01b038916600090815260146020526040812054919250906143e79083613fbc565b905061440889828a6144005766038d7ea4c68000614403565b60005b615362565b6001600160a01b03808b1660008181526014602090815260409182902094909455895181518781529485015280519193928e16927f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a929081900390910190a350505050505050505050565b6001600160a01b03851660009081526009602052604081205460ff1615806144b457506001600160a01b03851660009081526009602052604090205460ff16155b156144c35760095b905061201b565b6000806144cf8561565b565b919350909150600090508260118111156144e557fe5b146144ff578160118111156144f657fe5b9250505061201b565b8061450b5760036144f6565b6000886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561456357600080fd5b505afa158015614577573d6000803e3d6000fd5b505050506040513d602081101561458d57600080fd5b5051604080516020810190915260055481529091506000906145af9083613f9d565b9050808611156145c657601194505050505061201b565b60009a9950505050505050505050565b6001600160a01b0382166000908152601160209081526040808320600f90925282205490916001600160801b039091169061460f611a6a565b835490915060009061462f908390600160e01b900463ffffffff16615186565b90506000811180156146415750600083115b156147f75760006146b6876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561468457600080fd5b505afa158015614698573d6000803e3d6000fd5b505050506040513d60208110156146ae57600080fd5b50518761509d565b905060006146c483866151c0565b90506146ce615ad3565b600083116146eb57604051806020016040528060008152506146f5565b6146f58284615202565b90506146ff615ad3565b604080516020810190915288546001600160e01b031681526147219083615237565b9050604051806040016040528061475c8360000151604051806040016040528060088152602001673e3232346269747360c01b81525061525c565b6001600160e01b0316815260200161479388604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b63ffffffff9081169091526001600160a01b038c166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061426b92505050565b600081118015614810575083546001600160e01b031615155b1561426b5761483e82604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b0384166000908152601160205260409020614885615ad3565b50604080516020810190915281546001600160e01b031681526148a6615ad3565b5060408051602080820183526001600160a01b03808a16600090815260138352848120918a1680825282845294812080548552865195909152915291909155805115614a3f576148f4615ad3565b6148fe838361530e565b9050600061498d896001600160a01b03166395dd91938a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d602081101561498557600080fd5b50518861509d565b9050600061499b8284615333565b6001600160a01b038a16600090815260146020526040812054919250906149c29083613fbc565b90506149db8a828a6144005766038d7ea4c68000614403565b6001600160a01b03808c1660008181526014602090815260409182902094909455895181518781529485015280519193928f16927f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6929081900390910190a3505050505b50505050505050565b6001600160a01b0382166000908152600960205260409020600381015460ff16614a7557614a758361567b565b6001600160a01b0383166000908152600f6020526040902054608081811c906001600160801b038084169186901c908616818414614ab657614ab688613ff2565b808314614b4557614ac5615ad3565b60405180602001604052808a6001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b0957600080fd5b505afa158015614b1d573d6000803e3d6000fd5b505050506040513d6020811015614b3357600080fd5b505190529050614b4389826145d6565b505b5050506001600160a01b039094166000908152600f6020526040902092909255505050565b60005b600d54811015614bf557816001600160a01b0316600d8281548110614b8e57fe5b6000918252602090912001546001600160a01b03161415614bed576040805162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015290519081900360640190fd5b600101614b6d565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526009602052604081205460ff16614c6f57600961166d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16614ca757600061166d565b600080614cb78587866000613a8e565b91935090915060009050826011811115614ccd57fe5b14614ce757816011811115614cde57fe5b9250505061173d565b8015612abf576004614cde565b6001600160a01b0382166000908152600960205260408120805460ff16614d1f57600991505061125a565b6001600160a01b038316600090815260028201602052604090205460ff16151560011415614d5157600091505061125a565b6001600160a01b0380841660008181526002840160209081526040808320805460ff19166001908117909155600883528184208054918201815584529282902090920180549489166001600160a01b031990951685179055815193845283019190915280517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59281900390910190a15060009392505050565b614df2615ad3565b6040518060200160405280670de0b6b3a7640000614e18866000015186600001516151c0565b81614e1f57fe5b0490529392505050565b614e31615ad3565b6040518060200160405280614e5c614e558660000151670de0b6b3a76400006151c0565b855161596e565b90529392505050565b600a54600090600160b81b900460ff1615614eb0576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6001600160a01b03861660009081526009602052604090205460ff161580614ef157506001600160a01b03851660009081526009602052604090205460ff16155b15614efd5760096144bc565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f3657600080fd5b505afa158015614f4a573d6000803e3d6000fd5b505050506040513d6020811015614f6057600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b158015614fa657600080fd5b505afa158015614fba573d6000803e3d6000fd5b505050506040513d6020811015614fd057600080fd5b50516001600160a01b031614614fe75760026144bc565b614ff086613ff2565b614ffc86846000614273565b61500886856000614273565b6000612018565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111561503e57fe5b84601381111561504a57fe5b604080519283526020830191909152818101859052519081900360600190a183601181111561151657fe5b600061507f615ad3565b61508985856150bb565b9050611739615097826150dc565b84613fbc565b600061173d6150b484670de0b6b3a76400006151c0565b835161596e565b6150c3615ad3565b6040518060200160405280614e5c8560000151856151c0565b51670de0b6b3a7640000900490565b6000838301828582101561517d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561514257818101518382015260200161512a565b50505050905090810190601f16801561516f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b600061173d8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506159a1565b600061173d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f770000000000000000008152506159fb565b61520a615ad3565b6040518060200160405280614e5c615231866ec097ce7bc90715b34b9f10000000006151c0565b8561596e565b61523f615ad3565b6040518060200160405280614e5c85600001518560000151613fbc565b600081600160e01b84106152b15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b509192915050565b600081600160201b84106152b15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b615316615ad3565b6040518060200160405280614e5c85600001518560000151615186565b60006ec097ce7bc90715b34b9f10000000006153538484600001516151c0565b8161535a57fe5b049392505050565b60008061536d612606565b905082841015801561537f5750600084115b801561539357506001600160a01b03811615155b1561565257604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156153e357600080fd5b505afa1580156153f7573d6000803e3d6000fd5b505050506040513d602081101561540d57600080fd5b5051905080861161564f57601554604080516392b8de3960e01b81526001600160a01b038a81166004830152602482018a9052825160009485949216926392b8de39926044808301939192829003018186803b15801561546c57600080fd5b505afa158015615480573d6000803e3d6000fd5b505050506040513d604081101561549657600080fd5b5080516020909101519092509050811561553757836001600160a01b031663a9059cbb8a846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561550a57600080fd5b505af115801561551e573d6000803e3d6000fd5b505050506040513d602081101561553457600080fd5b50505b801561564157836001600160a01b031663a9059cbb601560009054906101000a90046001600160a01b03166001600160a01b031663ee9e81996040518163ffffffff1660e01b815260040160206040518083038186803b15801561559a57600080fd5b505afa1580156155ae573d6000803e3d6000fd5b505050506040513d60208110156155c457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b15801561561457600080fd5b505af1158015615628573d6000803e3d6000fd5b505050506040513d602081101561563e57600080fd5b50505b60009550505050505061173d565b50505b50919392505050565b600080600061566e846000806000613a8e565b9250925092509193909250565b6001600160a01b0381166000908152600960205260409020805460ff1615156001146156d8576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600381015460ff1615615722576040805162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60038101805460ff19166001908117909155604080516001600160a01b0385168152602081019290925280517f93c1f3e36ed71139f466a4ce8c9751790e2e33f5afb2df0dcfb3aeabe55d5aa29281900390910190a16001600160a01b0382166000908152601060205260409020546001600160e01b03161580156157ca57506001600160a01b038216600090815260106020526040902054600160e01b900463ffffffff16155b156158845760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001615829615803611a6a565b604051806040016040528060088152602001673e3332206269747360c01b8152506152b9565b63ffffffff9081169091526001600160a01b0384166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b6001600160a01b0382166000908152601160205260409020546001600160e01b03161580156158d657506001600160a01b038216600090815260116020526040902054600160e01b900463ffffffff16155b1561596a5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b0316815260200161590f615803611a6a565b63ffffffff9081169091526001600160a01b0384166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b5050565b600061173d83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250615a71565b600081848411156159f35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b505050900390565b6000831580615a08575082155b15615a155750600061173d565b83830283858281615a2257fe5b0414839061517d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b60008183615ac05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b50828481615aca57fe5b04949350505050565b6040518060200160405280600081525090565b8154818355818111156112bd576000838152602090206112bd918101908301615b81565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001615b48615ad3565b8152602001615b55615ad3565b8152602001615b62615ad3565b8152602001615b6f615ad3565b8152602001615b7c615ad3565b905290565b611a6c91905b80821115615b9b5760008155600101615b87565b509056fea265627a7a7231582034d68a109eed133d7577799b6fae08c978bcdb4c29ab8ef8fbccd08819c304ff64736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104115760003560e01c80638e8f294b11610220578063c488847b11610130578063dd09c4f8116100b8578063e875544611610087578063e87554461461108f578063e9af029214611097578063eabe7d91146110bd578063ede4edd0146110f3578063f851a4401461111957610411565b8063dd09c4f81461102d578063e0fbf09d14611035578063e4028eee1461105b578063e6653f3d1461108757610411565b8063d02f7351116100ff578063d02f735114610f57578063d686e9ee14610f9d578063da3d454c14610fc3578063dce1544914610ff9578063dcfbc0c71461102557610411565b8063c488847b14610ea7578063c9e3016414610edd578063ca0af04314610f03578063cc7ebdc414610f3157610411565b8063a7f0e231116101b3578063b0772d0b11610182578063b0772d0b14610d8c578063b21be7fd14610d94578063bb82aa5e14610dc2578063bdcdc25814610dca578063c299823814610e0657610411565b8063a7f0e23114610ce2578063aa90075414610d06578063abfceffc14610d0e578063ac0b0bb714610d8457610411565b806394b2294b116101ef57806394b2294b14610c805780639d1b5a0a14610c885780639d8cc5c414610c90578063a76b3fda14610cbc57610411565b80638e8f294b14610bb45780638ebf636414610c07578063903e679c14610c26578063929fe9a114610c5257610411565b80634fd42e17116103265780636d154ea5116102ae5780637e60c7a01161027d5780637e60c7a014610a255780638730657714610b4857806387f7630314610b7e5780638a0b5eef14610b865780638c57804e14610b8e57610411565b80636d154ea5146109c9578063731f0c2b146109ef578063747026c914610a155780637dc0d1d014610a1d57610411565b80635ec88c79116102f55780635ec88c79146107bd5780635f5af1aa146107e35780635fc7e71e146108095780636810dfa61461084f5780636b79c38d1461097b57610411565b80634fd42e171461072157806351dff9891461073e57806352d84d1e1461077a57806355ee1fe11461079757610411565b80632af2914b116103a95780633c94786f116103785780633c94786f1461067957806342cbb15c146106815780634ada90af146106895780634e79238f146106915780634ef4c3e1146106eb57610411565b80632af2914b146105d95780632d70db781461060f578063317b0b771461062e5780633bcf7ec11461064b57610411565b80631d7b33d7116103e55780631d7b33d71461053957806324008a621461057157806324a3d622146105ad57806326782247146105d157610411565b80627e3dd21461041657806318c882a5146104325780631c3db2e0146104605780631d504dc614610513575b600080fd5b61041e611121565b604080519115158252519081900360200190f35b61041e6004803603604081101561044857600080fd5b506001600160a01b0381351690602001351515611126565b6105116004803603604081101561047657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104a057600080fd5b8201836020820111156104b257600080fd5b803590602001918460208302840111600160201b831117156104d357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611260945050505050565b005b6105116004803603602081101561052957600080fd5b50356001600160a01b03166112c2565b61055f6004803603602081101561054f57600080fd5b50356001600160a01b0316611416565b60408051918252519081900360200190f35b61055f6004803603608081101561058757600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611428565b6105b561151e565b604080516001600160a01b039092168252519081900360200190f35b6105b561152d565b61055f600480360360608110156105ef57600080fd5b506001600160a01b0381358116916020810135909116906040013561153c565b61041e6004803603602081101561062557600080fd5b50351515611744565b61055f6004803603602081101561064457600080fd5b5035611818565b61041e6004803603604081101561066157600080fd5b506001600160a01b0381351690602001351515611925565b61041e611a5a565b61055f611a6a565b61055f611a6f565b6106cd600480360360808110156106a757600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611a75565b60408051938452602084019290925282820152519081900360600190f35b61055f6004803603606081101561070157600080fd5b506001600160a01b03813581169160208101359091169060400135611aaf565b61055f6004803603602081101561073757600080fd5b5035611d66565b6105116004803603608081101561075457600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d8e565b6105b56004803603602081101561079057600080fd5b5035611de8565b61055f600480360360208110156107ad57600080fd5b50356001600160a01b0316611e0f565b6106cd600480360360208110156107d357600080fd5b50356001600160a01b0316611e98565b61055f600480360360208110156107f957600080fd5b50356001600160a01b0316611ecd565b61055f600480360360a081101561081f57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611f53565b6105116004803603608081101561086557600080fd5b810190602081018135600160201b81111561087f57600080fd5b82018360208201111561089157600080fd5b803590602001918460208302840111600160201b831117156108b257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561090157600080fd5b82018360208201111561091357600080fd5b803590602001918460208302840111600160201b8311171561093457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505050803515159150602001351515612024565b6109a16004803603602081101561099157600080fd5b50356001600160a01b03166121c6565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61041e600480360360208110156109df57600080fd5b50356001600160a01b03166121f0565b61041e60048036036020811015610a0557600080fd5b50356001600160a01b0316612205565b61055f61221a565b6105b5612225565b61051160048036036040811015610a3b57600080fd5b810190602081018135600160201b811115610a5557600080fd5b820183602082011115610a6757600080fd5b803590602001918460208302840111600160201b83111715610a8857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610ad757600080fd5b820183602082011115610ae957600080fd5b803590602001918460208302840111600160201b83111715610b0a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612234945050505050565b610b6560048036036020811015610b5e57600080fd5b503561229d565b6040805192835260208301919091528051918290030190f35b61041e612330565b6105b5612340565b6109a160048036036020811015610ba457600080fd5b50356001600160a01b031661234f565b610bda60048036036020811015610bca57600080fd5b50356001600160a01b0316612379565b60408051951515865260208601949094529115158484015260608401526080830152519081900360a00190f35b61041e60048036036020811015610c1d57600080fd5b503515156123ae565b61055f60048036036040811015610c3c57600080fd5b506001600160a01b038135169060200135612481565b61041e60048036036040811015610c6857600080fd5b506001600160a01b03813581169160200135166125cd565b61055f612600565b6105b5612606565b61051160048036036040811015610ca657600080fd5b506001600160a01b03813516906020013561267c565b61055f60048036036020811015610cd257600080fd5b50356001600160a01b0316612774565b610cea6128f7565b604080516001600160e01b039092168252519081900360200190f35b61055f61290a565b610d3460048036036020811015610d2457600080fd5b50356001600160a01b0316612910565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610d70578181015183820152602001610d58565b505050509050019250505060405180910390f35b61041e612999565b610d346129a9565b61055f60048036036040811015610daa57600080fd5b506001600160a01b0381358116916020013516612a0b565b6105b5612a28565b61055f60048036036080811015610de057600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612a37565b610d3460048036036020811015610e1c57600080fd5b810190602081018135600160201b811115610e3657600080fd5b820183602082011115610e4857600080fd5b803590602001918460208302840111600160201b83111715610e6957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612acb945050505050565b610b6560048036036060811015610ebd57600080fd5b506001600160a01b03813581169160208101359091169060400135612b62565b61051160048036036020811015610ef357600080fd5b50356001600160a01b0316612d96565b61055f60048036036040811015610f1957600080fd5b506001600160a01b0381358116916020013516612dcf565b61055f60048036036020811015610f4757600080fd5b50356001600160a01b0316612dec565b61055f600480360360a0811015610f6d57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135612dfe565b61055f60048036036020811015610fb357600080fd5b50356001600160a01b0316612ec3565b61055f60048036036060811015610fd957600080fd5b506001600160a01b03813581169160208101359091169060400135612eee565b6105b56004803603604081101561100f57600080fd5b506001600160a01b038135169060200135613301565b6105b5613336565b6105b5613345565b61055f6004803603602081101561104b57600080fd5b50356001600160a01b031661338a565b61055f6004803603604081101561107157600080fd5b506001600160a01b03813516906020013561340d565b61041e6135a3565b61055f6135b3565b610511600480360360208110156110ad57600080fd5b50356001600160a01b03166135b9565b61055f600480360360608110156110d357600080fd5b506001600160a01b0381358116916020810135909116906040013561361d565b61055f6004803603602081101561110957600080fd5b50356001600160a01b031661363a565b6105b561394f565b600181565b6001600160a01b03821660009081526009602052604081205460ff1661117d576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600a546001600160a01b03163314806111a057506000546001600160a01b031633145b6111da576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6001600160a01b0383166000818152600c6020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260069083015265426f72726f7760d01b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150805b92915050565b60408051600180825281830190925260609160208083019080388339019050509050828160008151811061129057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506112bd8183600180612024565b505050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156112fb57600080fd5b505afa15801561130f573d6000803e3d6000fd5b505050506040513d602081101561132557600080fd5b50516001600160a01b0316331461136c576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113a757600080fd5b505af11580156113bb573d6000803e3d6000fd5b505050506040513d60208110156113d157600080fd5b505115611413576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b50565b600f6020526000908152604090205481565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b15801561147957600080fd5b505afa15801561148d573d6000803e3d6000fd5b505050506040513d60208110156114a357600080fd5b505115806114c25750826001600160a01b0316846001600160a01b0316145b611507576040805162461bcd60e51b81526020600482015260116024820152702830bcb2b910109e903137b93937bbb2b960791b604482015290519081900360640190fd5b6115138585858561395e565b90505b949350505050565b600a546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b0383166000908152600c602052604081205460ff1615611593576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b60155460408051634d8c928d60e11b81526001600160a01b03868116600483015291519190921691639b19251a916024808301926020929190829003018186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d602081101561160a57600080fd5b505161164a576040805162461bcd60e51b815260206004820152600a602482015269085dda1a5d195b1a5cdd60b21b604482015290519081900360640190fd5b6001600160a01b03841660009081526009602052604090205460ff166116745760095b905061173d565b6015546040805163e0fbf09d60e01b81526001600160a01b0387811660048301529151600093929092169163e0fbf09d91602480820192602092909190829003018186803b1580156116c557600080fd5b505afa1580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b5051905080831115611736576040805162461bcd60e51b815260206004820152600b60248201526a18d85c081c995858da195960aa1b604482015290519081900360640190fd5b60005b9150505b9392505050565b600a546000906001600160a01b031633148061176a57506000546001600160a01b031633145b6117a4576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b600a8054831515600160b81b810260ff60b81b1990921691909117909155604080516020810192909252808252600582820152645365697a6560d81b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a150805b919050565b600080546001600160a01b0316331461183e5761183760016004613a19565b9050611813565b611846615ad3565b50604080516020810190915282815261185d615ad3565b50604080516020810190915266b1a2bc2ec50000815261187d8282613a7f565b156118965761188d600580613a19565b92505050611813565b61189e615ad3565b506040805160208101909152670c7d713b49da000081526118bf8184613a87565b156118d9576118cf600580613a19565b9350505050611813565b600554604080519182526020820187905280517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd99281900390910190a150505060059190915550600090565b6001600160a01b03821660009081526009602052604081205460ff1661197c576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600a546001600160a01b031633148061199f57506000546001600160a01b031633145b6119d9576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6001600160a01b0383166000818152600b6020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260049083015263135a5b9d60e21b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150919050565b600a54600160a01b900460ff1681565b435b90565b60065481565b600080600080600080611a8a8a8a8a8a613a8e565b925092509250826011811115611a9c57fe5b95509093509150505b9450945094915050565b6015546040805163fbac395160e01b81526001600160a01b0385811660048301529151600093929092169163fbac395191602480820192602092909190829003018186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d6020811015611b2a57600080fd5b505115611b3657600080fd5b6001600160a01b0384166000908152600b602052604090205460ff1615611b5c57600080fd5b6001600160a01b03841660009081526009602052604090205460ff16611b8357600961166d565b601554604080516321636b8b60e21b81526001600160a01b0387811660048301529151600093929092169163858dae2c91602480820192602092909190829003018186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d6020811015611bfe57600080fd5b505190508015611d5157611c10615ad3565b6040518060200160405280876001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5457600080fd5b505afa158015611c68573d6000803e3d6000fd5b505050506040513d6020811015611c7e57600080fd5b50519052604080516318160ddd60e01b81529051919250600091611cff9184916001600160a01b038b16916318160ddd916004808301926020929190829003018186803b158015611cce57600080fd5b505afa158015611ce2573d6000803e3d6000fd5b505050506040513d6020811015611cf857600080fd5b5051613f9d565b90506000611d0d8287613fbc565b905083811115611d4d576040805162461bcd60e51b8152602060048083019190915260248201526303e6361760e41b604482015290519081900360640190fd5b5050505b611d5a85613ff2565b61173685856000614273565b600080546001600160a01b03163314611d85576118376001600b613a19565b50600655600090565b80158015611d9c5750600082115b15611de2576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b600d8181548110611df557fe5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b03163314611e2e5761183760016010613a19565b600454604080516001600160a01b039283168152918416602083015280517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e229281900390910190a1600480546001600160a01b0319166001600160a01b038416179055600061125a565b600080600080600080611eaf876000806000613a8e565b925092509250826011811115611ec157fe5b97919650945092505050565b600080546001600160a01b03163314611eec5761183760016013613a19565b600a80546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9281900390910190a160009392505050565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015611fa457600080fd5b505afa158015611fb8573d6000803e3d6000fd5b505050506040513d6020811015611fce57600080fd5b50511561200b576040805162461bcd60e51b815260206004820152600660248201526518dc99591a5d60d21b604482015290519081900360640190fd5b6120188686868686614473565b90505b95945050505050565b60005b83518110156121bf57600084828151811061203e57fe5b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff166120a5576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b6001841515141561216d576120b8615ad3565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b50519052905061213682826145d6565b60005b875181101561216a576121628389838151811061215257fe5b6020026020010151846001614865565b600101612139565b50505b600183151514156121b65761218181613ff2565b60005b86518110156121b4576121ac8288838151811061219d57fe5b60200260200101516001614273565b600101612184565b505b50600101612027565b5050505050565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b66038d7ea4c6800081565b6004546001600160a01b031681565b6000546001600160a01b0316331461224b57600080fd5b805182511461225957600080fd5b60005b82518110156112bd5761229583828151811061227457fe5b602002602001015183838151811061228857fe5b6020026020010151614a48565b60010161225c565b60155460065460408051630655a3bd60e11b8152600481018590526024810192909252805160009384936001600160a01b0390911692630cab477a92604480840193829003018186803b1580156122f357600080fd5b505afa158015612307573d6000803e3d6000fd5b505050506040513d604081101561231d57600080fd5b5080516020909101519092509050915091565b600a54600160b01b900460ff1681565b6015546001600160a01b031681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6009602052600090815260409020805460018201546003830154600484015460059094015460ff938416949293909116919085565b600a546000906001600160a01b03163314806123d457506000546001600160a01b031633145b61240e576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b600a8054831515600160b01b810260ff60b01b1990921691909117909155604080516020810192909252808252600882820152672a3930b739b332b960c11b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a15090565b600080546001600160a01b031633146124a7576124a06001600b613a19565b905061125a565b6001600160a01b0383166000908152600960205260409020805460ff166124dc576124d460096007613a19565b91505061125a565b6124e4615ad3565b5060408051602081019091528381526124fb615ad3565b506040805160208101909152670de0b6b3a7640000815261251c8282613a87565b156125375761252d6007600c613a19565b935050505061125a565b61253f615ad3565b5060408051602081019091526714d1120d7b16000081526125608184613a87565b1561257c576125716007600c613a19565b94505050505061125a565b6005840154604080519182526020820188905280517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169281900390910190a150505060050191909155506000919050565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b60075481565b60155460408051636605dfa760e01b815290516000926001600160a01b031691636605dfa7916004808301926020929190829003018186803b15801561264b57600080fd5b505afa15801561265f573d6000803e3d6000fd5b505050506040513d602081101561267557600080fd5b5051905090565b6000546001600160a01b031633146126c4576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b6000811180156126dc5750670de0b6b3a76400008111155b61271d576040805162461bcd60e51b815260206004820152600d60248201526c10b137b93937bba330b1ba37b960991b604482015290519081900360640190fd5b6001600160a01b038216600081815260096020908152604091829020600401849055815184815291517f06ba34ca74586d7d83f17a9e4054760897dda97278c46bd8bdf829f72afb66609281900390910190a25050565b600080546001600160a01b031633146127935761183760016012613a19565b6001600160a01b03821660009081526009602052604090205460ff16156127c057611837600a6011613a19565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d602081101561282357600080fd5b50506040805160a081018252600180825260006020838101828152848601838152670de0b6b3a764000060608701908152608087018581526001600160a01b038b1686526009909452969093209451855490151560ff19918216178655905193850193909355905160038401805491151591909316179091559151600482015590516005909101556128b482614b6a565b604080516001600160a01b038416815290517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9181900360200190a1600061125a565b6ec097ce7bc90715b34b9f100000000081565b600e5481565b60608060086000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561298c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161296e575b5093979650505050505050565b600a54600160b81b900460ff1681565b6060600d805480602002602001604051908101604052809291908181526020018280548015612a0157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129e3575b5050505050905090565b601260209081526000928352604080842090915290825290205481565b6002546001600160a01b031681565b600a54600090600160b01b900460ff1615612a82576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6000612a8f868685614c48565b90508015612a9e579050611516565b612aa786613ff2565b612ab386866000614273565b612abf86856000614273565b60009695505050505050565b6060600082519050606081604051908082528060200260200182016040528015612aff578160200160208202803883390190505b50905060005b82811015612b5a576000858281518110612b1b57fe5b60200260200101519050612b2f8133614cf4565b6011811115612b3a57fe5b838381518110612b4657fe5b602090810291909101015250600101612b05565b509392505050565b600480546040805163fc57d4df60e01b81526001600160a01b038781169482019490945290516000938493849391169163fc57d4df91602480820192602092909190829003018186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d6020811015612be257600080fd5b5051600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051939450600093929091169163fc57d4df91602480820192602092909190829003018186803b158015612c3b57600080fd5b505afa158015612c4f573d6000803e3d6000fd5b505050506040513d6020811015612c6557600080fd5b50519050811580612c74575080155b15612c8957600d935060009250612d8e915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc457600080fd5b505afa158015612cd8573d6000803e3d6000fd5b505050506040513d6020811015612cee57600080fd5b505190506000612cfc615ad3565b612d04615ad3565b612d0c615ad3565b6000612d178c612ec3565b9050612d3f60405180602001604052808381525060405180602001604052808b815250614dea565b9350612d67604051806020016040528089815250604051806020016040528089815250614dea565b9250612d738484614e29565b9150612d7f828c613f9d565b60009a50985050505050505050505b935093915050565b6000546001600160a01b03163314612dad57600080fd5b601580546001600160a01b0319166001600160a01b0392909216919091179055565b601360209081526000928352604080842090915290825290205481565b60146020526000908152604090205481565b60155460408051632c333e2560e01b81526001600160a01b03858116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015612e4f57600080fd5b505afa158015612e63573d6000803e3d6000fd5b505050506040513d6020811015612e7957600080fd5b505115612eb6576040805162461bcd60e51b815260206004820152600660248201526518dc99591a5d60d21b604482015290519081900360640190fd5b6120188686868686614e65565b6001600160a01b0381166000908152600960205260408120600501548061125a575050600654611813565b6001600160a01b0383166000908152600c602052604081205460ff1615612f45576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6001600160a01b03841660009081526009602052604090205460ff16612f6c57600961166d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661304e57336001600160a01b03851614612fe4576040805162461bcd60e51b815260206004820152600760248201526610b1aa37b5b2b760c91b604482015290519081900360640190fd5b6000612ff03385614cf4565b9050600081601181111561300057fe5b146130195780601181111561301157fe5b91505061173d565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff1661304c57fe5b505b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801561309f57600080fd5b505afa1580156130b3573d6000803e3d6000fd5b505050506040513d60208110156130c957600080fd5b50516130d657600d61166d565b60155460408051630f5a372160e21b81526001600160a01b03878116600483015291516000939290921691633d68dc8491602480820192602092909190829003018186803b15801561312757600080fd5b505afa15801561313b573d6000803e3d6000fd5b505050506040513d602081101561315157600080fd5b505190508015613212576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561319657600080fd5b505afa1580156131aa573d6000803e3d6000fd5b505050506040513d60208110156131c057600080fd5b5051905060006131d08286613fbc565b905082811061320f576040805162461bcd60e51b815260206004808301919091526024820152630216361760e41b604482015290519081900360640190fd5b50505b6000806132228688600088613a8e565b9193509091506000905082601181111561323857fe5b146132535781601181111561324957fe5b935050505061173d565b8015613260576004613249565b613268615ad3565b6040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ac57600080fd5b505afa1580156132c0573d6000803e3d6000fd5b505050506040513d60208110156132d657600080fd5b5051905290506132e688826145d6565b6132f38888836000614865565b600098975050505050505050565b6008602052816000526040600020818154811061331a57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60155460408051631ba1389f60e31b815290516000926001600160a01b03169163dd09c4f8916004808301926020929190829003018186803b15801561264b57600080fd5b6015546040805163e0fbf09d60e01b81526001600160a01b0384811660048301529151600093929092169163e0fbf09d91602480820192602092909190829003018186803b1580156133db57600080fd5b505afa1580156133ef573d6000803e3d6000fd5b505050506040513d602081101561340557600080fd5b505192915050565b600080546001600160a01b0316331461342c576124a060016006613a19565b6001600160a01b0383166000908152600960205260409020805460ff16613459576124d460096007613a19565b613461615ad3565b506040805160208101909152838152613478615ad3565b506040805160208101909152670c7d713b49da000081526134998183613a87565b156134aa5761252d60066008613a19565b84158015906135335750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801561350557600080fd5b505afa158015613519573d6000803e3d6000fd5b505050506040513d602081101561352f57600080fd5b5051155b156135445761252d600d6009613a19565b6001830154604080516001600160a01b03891681526020810192909252818101879052517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a1505060010191909155506000919050565b600a54600160a81b900460ff1681565b60055481565b61141381600d80548060200260200160405190810160405280929190818152602001828054801561361357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116135f5575b5050505050611260565b60008061362b858585614c48565b90508015611d5157905061173d565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801561369b57600080fd5b505afa1580156136af573d6000803e3d6000fd5b505050506040513d60808110156136c557600080fd5b50805160208201516040909201519094509092509050821561371a576040805162461bcd60e51b8152602060048201526009602482015268085cdb985c1cda1bdd60ba1b604482015290519081900360640190fd5b80156137375761372c600c6002613a19565b945050505050611813565b6000613744873385614c48565b9050801561376557613759600e60038361500f565b95505050505050611813565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166137a45760009650505050505050611813565b3360009081526002820160209081526040808320805460ff19169055600882529182902080548351818402810184019094528084526060939283018282801561381657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116137f8575b5050835193945083925060009150505b8281101561386b57896001600160a01b031684828151811061384457fe5b60200260200101516001600160a01b031614156138635780915061386b565b600101613826565b5081811061387557fe5b33600090815260086020526040902080548190600019810190811061389657fe5b9060005260206000200160009054906101000a90046001600160a01b03168183815481106138c057fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580546138f9826000198301615ae6565b50604080516001600160a01b038c16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009c9b505050505050505050505050565b6000546001600160a01b031681565b6001600160a01b03841660009081526009602052604081205460ff1661398657506009611516565b61398e615ad3565b6040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d257600080fd5b505afa1580156139e6573d6000803e3d6000fd5b505050506040513d60208110156139fc57600080fd5b505190529050613a0c86826145d6565b612abf8685836000614865565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115613a4857fe5b836013811115613a5457fe5b604080519283526020830191909152600082820152519081900360600190a182601181111561173d57fe5b519051111590565b5190511090565b60155460408051632c333e2560e01b81526001600160a01b038781166004830152915160009384938493600019939190921691632c333e25916024808301926020929190829003018186803b158015613ae657600080fd5b505afa158015613afa573d6000803e3d6000fd5b505050506040513d6020811015613b1057600080fd5b50511415613b28575060009150600019905081611aa5565b613b30615b0a565b6001600160a01b03881660009081526008602090815260408083208054825181850281018501909352808352606093830182828015613b9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b7a575b50939450600093505050505b8151811015613e5f576000828281518110613bbb57fe5b60200260200101519050806001600160a01b031663c37f68e28d6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015613c1b57600080fd5b505afa158015613c2f573d6000803e3d6000fd5b505050506040513d6080811015613c4557600080fd5b508051602082015160408084015160609485015160808b0152938901939093529187019190915293508315613c8a5750600f965060009550859450611aa59350505050565b60408051602080820183526001600160a01b03808516600081815260098085528682206001810154875260c08d01969096528651808601885291839052845260049485015481526101408b01528451808401865260808b0151815260e08b01528354855163fc57d4df60e01b815294850191909152935193169263fc57d4df926024808201939291829003018186803b158015613d2657600080fd5b505afa158015613d3a573d6000803e3d6000fd5b505050506040513d6020811015613d5057600080fd5b505160a08601819052613d735750600d965060009550859450611aa59350505050565b604080516020810190915260a0860151815261010086015260c085015160e0860151613dad91613da291614dea565b866101000151614dea565b610120860181905260408601518651613dc7929190615075565b85526060850151610140860151600091613de09161509d565b9050613df6866101000151828860200151615075565b60208701526001600160a01b03828116908d161415613e5557613e238661012001518c8860200151615075565b6020870152610140860151613e39908b9061509d565b9050613e4f866101000151828860200151615075565b60208701525b5050600101613ba4565b5060155460408051632c333e2560e01b81526001600160a01b038d8116600483015291516000939290921691632c333e2591602480820192602092909190829003018186803b158015613eb157600080fd5b505afa158015613ec5573d6000803e3d6000fd5b505050506040513d6020811015613edb57600080fd5b50511115613f5f5760155460408051632c333e2560e01b81526001600160a01b038d8116600483015291519190921691632c333e25916024808301926020929190829003018186803b158015613f3057600080fd5b505afa158015613f44573d6000803e3d6000fd5b505050506040513d6020811015613f5a57600080fd5b505183525b602083015183511115613f845750506020810151905160009450039150829050611aa5565b5050805160209091015160009450849350039050611aa5565b6000613fa7615ad3565b613fb184846150bb565b9050611516816150dc565b600061173d8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506150eb565b6001600160a01b0381166000908152601060209081526040808320600f9092528220549091608082901c90614025611a6a565b8454909150600090614045908390600160e01b900463ffffffff16615186565b90506000811180156140575750600083115b15614204576000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561409757600080fd5b505afa1580156140ab573d6000803e3d6000fd5b505050506040513d60208110156140c157600080fd5b5051905060006140d183866151c0565b90506140db615ad3565b600083116140f85760405180602001604052806000815250614102565b6141028284615202565b905061410c615ad3565b604080516020810190915289546001600160e01b0316815261412e9083615237565b905060405180604001604052806141698360000151604051806040016040528060088152602001673e3232346269747360c01b81525061525c565b6001600160e01b031681526020016141a088604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b63ffffffff9081169091526001600160a01b038c166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061426b92505050565b60008111801561421d575084546001600160e01b031615155b1561426b5761424b82604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b855463ffffffff91909116600160e01b026001600160e01b039091161785555b505050505050565b6001600160a01b0383166000908152601060205260409020614293615ad3565b50604080516020810190915281546001600160e01b031681526142b4615ad3565b5060408051602080820183526001600160a01b038089166000908152601283528481209189168082528284529481208054855286519590915291529190915580511580156143025750815115155b1561431a576ec097ce7bc90715b34b9f100000000081525b614322615ad3565b61432c838361530e565b90506000876001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561438657600080fd5b505afa15801561439a573d6000803e3d6000fd5b505050506040513d60208110156143b057600080fd5b5051905060006143c08284615333565b6001600160a01b038916600090815260146020526040812054919250906143e79083613fbc565b905061440889828a6144005766038d7ea4c68000614403565b60005b615362565b6001600160a01b03808b1660008181526014602090815260409182902094909455895181518781529485015280519193928e16927f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a929081900390910190a350505050505050505050565b6001600160a01b03851660009081526009602052604081205460ff1615806144b457506001600160a01b03851660009081526009602052604090205460ff16155b156144c35760095b905061201b565b6000806144cf8561565b565b919350909150600090508260118111156144e557fe5b146144ff578160118111156144f657fe5b9250505061201b565b8061450b5760036144f6565b6000886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561456357600080fd5b505afa158015614577573d6000803e3d6000fd5b505050506040513d602081101561458d57600080fd5b5051604080516020810190915260055481529091506000906145af9083613f9d565b9050808611156145c657601194505050505061201b565b60009a9950505050505050505050565b6001600160a01b0382166000908152601160209081526040808320600f90925282205490916001600160801b039091169061460f611a6a565b835490915060009061462f908390600160e01b900463ffffffff16615186565b90506000811180156146415750600083115b156147f75760006146b6876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561468457600080fd5b505afa158015614698573d6000803e3d6000fd5b505050506040513d60208110156146ae57600080fd5b50518761509d565b905060006146c483866151c0565b90506146ce615ad3565b600083116146eb57604051806020016040528060008152506146f5565b6146f58284615202565b90506146ff615ad3565b604080516020810190915288546001600160e01b031681526147219083615237565b9050604051806040016040528061475c8360000151604051806040016040528060088152602001673e3232346269747360c01b81525061525c565b6001600160e01b0316815260200161479388604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b63ffffffff9081169091526001600160a01b038c166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555061426b92505050565b600081118015614810575083546001600160e01b031615155b1561426b5761483e82604051806040016040528060078152602001663e33326269747360c81b8152506152b9565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b0384166000908152601160205260409020614885615ad3565b50604080516020810190915281546001600160e01b031681526148a6615ad3565b5060408051602080820183526001600160a01b03808a16600090815260138352848120918a1680825282845294812080548552865195909152915291909155805115614a3f576148f4615ad3565b6148fe838361530e565b9050600061498d896001600160a01b03166395dd91938a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d602081101561498557600080fd5b50518861509d565b9050600061499b8284615333565b6001600160a01b038a16600090815260146020526040812054919250906149c29083613fbc565b90506149db8a828a6144005766038d7ea4c68000614403565b6001600160a01b03808c1660008181526014602090815260409182902094909455895181518781529485015280519193928f16927f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6929081900390910190a3505050505b50505050505050565b6001600160a01b0382166000908152600960205260409020600381015460ff16614a7557614a758361567b565b6001600160a01b0383166000908152600f6020526040902054608081811c906001600160801b038084169186901c908616818414614ab657614ab688613ff2565b808314614b4557614ac5615ad3565b60405180602001604052808a6001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b0957600080fd5b505afa158015614b1d573d6000803e3d6000fd5b505050506040513d6020811015614b3357600080fd5b505190529050614b4389826145d6565b505b5050506001600160a01b039094166000908152600f6020526040902092909255505050565b60005b600d54811015614bf557816001600160a01b0316600d8281548110614b8e57fe5b6000918252602090912001546001600160a01b03161415614bed576040805162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b604482015290519081900360640190fd5b600101614b6d565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03831660009081526009602052604081205460ff16614c6f57600961166d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16614ca757600061166d565b600080614cb78587866000613a8e565b91935090915060009050826011811115614ccd57fe5b14614ce757816011811115614cde57fe5b9250505061173d565b8015612abf576004614cde565b6001600160a01b0382166000908152600960205260408120805460ff16614d1f57600991505061125a565b6001600160a01b038316600090815260028201602052604090205460ff16151560011415614d5157600091505061125a565b6001600160a01b0380841660008181526002840160209081526040808320805460ff19166001908117909155600883528184208054918201815584529282902090920180549489166001600160a01b031990951685179055815193845283019190915280517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59281900390910190a15060009392505050565b614df2615ad3565b6040518060200160405280670de0b6b3a7640000614e18866000015186600001516151c0565b81614e1f57fe5b0490529392505050565b614e31615ad3565b6040518060200160405280614e5c614e558660000151670de0b6b3a76400006151c0565b855161596e565b90529392505050565b600a54600090600160b81b900460ff1615614eb0576040805162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015290519081900360640190fd5b6001600160a01b03861660009081526009602052604090205460ff161580614ef157506001600160a01b03851660009081526009602052604090205460ff16155b15614efd5760096144bc565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f3657600080fd5b505afa158015614f4a573d6000803e3d6000fd5b505050506040513d6020811015614f6057600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b158015614fa657600080fd5b505afa158015614fba573d6000803e3d6000fd5b505050506040513d6020811015614fd057600080fd5b50516001600160a01b031614614fe75760026144bc565b614ff086613ff2565b614ffc86846000614273565b61500886856000614273565b6000612018565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111561503e57fe5b84601381111561504a57fe5b604080519283526020830191909152818101859052519081900360600190a183601181111561151657fe5b600061507f615ad3565b61508985856150bb565b9050611739615097826150dc565b84613fbc565b600061173d6150b484670de0b6b3a76400006151c0565b835161596e565b6150c3615ad3565b6040518060200160405280614e5c8560000151856151c0565b51670de0b6b3a7640000900490565b6000838301828582101561517d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561514257818101518382015260200161512a565b50505050905090810190601f16801561516f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b600061173d8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506159a1565b600061173d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f770000000000000000008152506159fb565b61520a615ad3565b6040518060200160405280614e5c615231866ec097ce7bc90715b34b9f10000000006151c0565b8561596e565b61523f615ad3565b6040518060200160405280614e5c85600001518560000151613fbc565b600081600160e01b84106152b15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b509192915050565b600081600160201b84106152b15760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b615316615ad3565b6040518060200160405280614e5c85600001518560000151615186565b60006ec097ce7bc90715b34b9f10000000006153538484600001516151c0565b8161535a57fe5b049392505050565b60008061536d612606565b905082841015801561537f5750600084115b801561539357506001600160a01b03811615155b1561565257604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156153e357600080fd5b505afa1580156153f7573d6000803e3d6000fd5b505050506040513d602081101561540d57600080fd5b5051905080861161564f57601554604080516392b8de3960e01b81526001600160a01b038a81166004830152602482018a9052825160009485949216926392b8de39926044808301939192829003018186803b15801561546c57600080fd5b505afa158015615480573d6000803e3d6000fd5b505050506040513d604081101561549657600080fd5b5080516020909101519092509050811561553757836001600160a01b031663a9059cbb8a846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561550a57600080fd5b505af115801561551e573d6000803e3d6000fd5b505050506040513d602081101561553457600080fd5b50505b801561564157836001600160a01b031663a9059cbb601560009054906101000a90046001600160a01b03166001600160a01b031663ee9e81996040518163ffffffff1660e01b815260040160206040518083038186803b15801561559a57600080fd5b505afa1580156155ae573d6000803e3d6000fd5b505050506040513d60208110156155c457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b15801561561457600080fd5b505af1158015615628573d6000803e3d6000fd5b505050506040513d602081101561563e57600080fd5b50505b60009550505050505061173d565b50505b50919392505050565b600080600061566e846000806000613a8e565b9250925092509193909250565b6001600160a01b0381166000908152600960205260409020805460ff1615156001146156d8576040805162461bcd60e51b8152602060048201526007602482015266085b1a5cdd195960ca1b604482015290519081900360640190fd5b600381015460ff1615615722576040805162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60038101805460ff19166001908117909155604080516001600160a01b0385168152602081019290925280517f93c1f3e36ed71139f466a4ce8c9751790e2e33f5afb2df0dcfb3aeabe55d5aa29281900390910190a16001600160a01b0382166000908152601060205260409020546001600160e01b03161580156157ca57506001600160a01b038216600090815260106020526040902054600160e01b900463ffffffff16155b156158845760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001615829615803611a6a565b604051806040016040528060088152602001673e3332206269747360c01b8152506152b9565b63ffffffff9081169091526001600160a01b0384166000908152601060209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b6001600160a01b0382166000908152601160205260409020546001600160e01b03161580156158d657506001600160a01b038216600090815260116020526040902054600160e01b900463ffffffff16155b1561596a5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b0316815260200161590f615803611a6a565b63ffffffff9081169091526001600160a01b0384166000908152601160209081526040909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b5050565b600061173d83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250615a71565b600081848411156159f35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b505050900390565b6000831580615a08575082155b15615a155750600061173d565b83830283858281615a2257fe5b0414839061517d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b60008183615ac05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561514257818101518382015260200161512a565b50828481615aca57fe5b04949350505050565b6040518060200160405280600081525090565b8154818355818111156112bd576000838152602090206112bd918101908301615b81565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001615b48615ad3565b8152602001615b55615ad3565b8152602001615b62615ad3565b8152602001615b6f615ad3565b8152602001615b7c615ad3565b905290565b611a6c91905b80821115615b9b5760008155600101615b87565b509056fea265627a7a7231582034d68a109eed133d7577799b6fae08c978bcdb4c29ab8ef8fbccd08819c304ff64736f6c63430005110032",
  "devdoc": {
    "methods": {
      "_setBorrowFactor(address,uint256)": {
        "details": "Admin function to set the borrow factors.",
        "params": {
          "cToken": "The addresses of the markets (tokens) to change the borrow factors for",
          "newBorrowFactor": "The new borrow factor values in underlying to be set. Must be between (0, 1]"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setCompSpeeds(address[],uint256[])": {
        "details": "Admin function to set new token distribution speed"
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "return": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "return": "True if the account is in the asset, otherwise false."
      },
      "claimComp(address)": {
        "params": {
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address,address[])": {
        "params": {
          "cTokens": "The list of markets to claim COMP in",
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim COMP earned by borrowing",
          "cTokens": "The list of markets to claim COMP in",
          "holders": "The addresses to claim COMP for",
          "suppliers": "Whether or not to claim COMP earned by supplying"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "cTokens": "The list of addresses of the cToken markets to be enabled"
        },
        "return": "Success indicator for whether each corresponding market was entered"
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "return": "Whether or not the account successfully exited the market"
      },
      "getAccountLiquidity(address)": {
        "return": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)"
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "return": "The list of market addresses"
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "return": "A dynamic list with the assets the account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "cTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "return": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
          "cTokenBorrowed": "The address of the borrowed cToken",
          "cTokenCollateral": "The address of the collateral cToken"
        },
        "return": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "return": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "return": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "return": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "return": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      }
    }
  },
  "userdoc": {
    "methods": {
      "_setBorrowFactor(address,uint256)": {
        "notice": "Set the given borrow factors for the given cToken markets."
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setCompSpeeds(address[],uint256[])": {
        "notice": "Sets new governance token distribution speed"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimComp(address)": {
        "notice": "Claim all the comp accrued by holder in all markets"
      },
      "claimComp(address,address[])": {
        "notice": "Claim all the comp accrued by holder in the specified markets"
      },
      "claimComp(address[],address[],bool,bool)": {
        "notice": "Claim all comp accrued by the holders"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15612,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15614,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15616,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15618,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15623,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)18861"
      },
      {
        "astId": 15625,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15627,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15629,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15634,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)12396)dyn_storage)"
      },
      {
        "astId": 15656,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Market)15652_storage)"
      },
      {
        "astId": 15658,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 15660,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 15662,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 15664,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 15666,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 15670,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15674,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15685,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(CToken)12396)dyn_storage"
      },
      {
        "astId": 15687,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 15691,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compSpeeds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15695,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compSupplyState",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(CompMarketState)15682_storage)"
      },
      {
        "astId": 15699,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compBorrowState",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(CompMarketState)15682_storage)"
      },
      {
        "astId": 15705,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compSupplierIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15711,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compBorrowerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15715,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "compAccrued",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7052,
        "contract": "contracts/Torchestroller.sol:Torchestroller",
        "label": "torchesConfig",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(TorchesConfig)5694"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(CToken)12396)dyn_storage": {
        "base": "t_contract(CToken)12396",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)12396": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)18861": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(TorchesConfig)5694": {
        "encoding": "inplace",
        "label": "contract TorchesConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)12396)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)12396)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(CompMarketState)15682_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV3Storage.CompMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(CompMarketState)15682_storage"
      },
      "t_mapping(t_address,t_struct(Market)15652_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)15652_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CompMarketState)15682_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV3Storage.CompMarketState",
        "members": [
          {
            "astId": 15679,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 15681,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)15652_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 15639,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15641,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15645,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 15647,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "isComped",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15649,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "borrowFactorMantissa",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15651,
            "contract": "contracts/Torchestroller.sol:Torchestroller",
            "label": "liquidationIncentiveMantissa",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
